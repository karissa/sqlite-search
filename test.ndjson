{"name":"27bslash6-module","readme":"27bslash6 module\n================\n\na dump module for a dump project\n\n"}
{"name":"2gis","readme":"# 2GIS API for Node.js\nA simple way to use the 2GIS API from Node.js\n\nnpm: https://npmjs.org/package/2gis"}
{"name":"3scale-senico","readme":"# 3scale integration plugin for JavaScript/CoffeeScript/Node.js applications [![Build Status](https://secure.travis-ci.org/3scale/3scale_ws_api_for_nodejs.png?branch=master)](http://travis-ci.org/3scale/3scale_ws_api_for_nodejs)\n\n3scale is an API Infrastructure service which handles API Keys, Rate Limiting, Analytics, Billing Payments and Developer Management.\nIncludes a configurable API dashboard and developer portal CMS.\nMore product stuff at http://www.3scale.net/, support information at http://support.3scale.net/.\n\n#### Requirements\n\n* libxml2 library\n\n#### Installation\n\nThe module is delivered through the package manager npm, so that the installation should be easy as: `npm install 3scale`\n\n#### Testing\n\nTo run tests: `vows test/* --spec`\n\nIn the root of the project.\n\n#### Usage\n\n    var Client = require('3scale').Client;\n\n    client = new Client(\"your provider key\");\n\n    client.authorize({app_id: \"your application id\", app_key: \"your application key\"}, function(response){\n      sys.log(sys.inspect(response));\n    });\n\n    // Or for reports\n\n    var trans = [\n                  { \"app_id\": \"your application id\", \"usage\": {\"hits\": 1}},\n                  { \"app_id\": \"your application id\", \"usage\": {\"hits\": 1000}}\n                 ]\n\n    client.report(trans, function(response){\n      sys.log(sys.inspect(response));\n    });\n\n"}
{"name":"404project","readme":"node-404project\n=====================\n\nA simple client for reporting 404 server errors to the \"404 project\" at http://www.dshield.org/tools/404project.html.\n\nInstallation\n---------------------\n\n```\nnpm install 404project\n```\n\nUsage\n---------------------\n\n```\nvar express = require('express');\n\n// the user id is usually a number, like 1234567\nvar myUserID='[Your ISC ID]';\nvar myKey='[Your Authentication Key]';\nvar reporter = require('404project').create(myUserID, myKey);\nvar app = module.exports = express.createServer();\n\napp.get(function(request, response) {\n    response.statusCode = 404;\n    response.end(\"<h1>not found</h1>\");\n    reporter.report404(request);\n});\n\napp.listen(3000);\n```\n"}
{"name":"APIConnect","readme":"# APIConnect\n\nThis class creates a very easy and intuitive way to interact with APIs,\nmost commonly those hosted on other domains.\n\nSetup:\n\n```\nvar twitter = new APIConnect();\ntwitter.domain('api.twitter.com');\ntwitter.get('statuses/home_timeline');\ntwitter.getHomeTimeline();\n\n> GET http://api.twitter.com/statuses/home_timeline.json\n```\n\nThe route `statuses/home_timeline` will be automatically set up and accessible through a camelized\nmethod name in the api object. Calling the route is as simple as calling the method.\n\nWhen making the call, the first object is `params`. This will most commonly be added to the end of\nthe query string, but in cases where the route contains params such as `tweets/:tweet_id`, it will\nbe placed here instead and removed from the query string.\n\nThe second object passed is an options hash. This will override any default params and also end up\nbeing passed to the AJAX lib, in this case jQuery. Any valid option for `jQuery.ajax` is allowed here.\nThis means that all the standard callbacks will work:\n\n```\ntwitter.getHomeTimeline({}, {\n  success: function() {\n    // Congratulations!\n  },\n  error: function() {\n    // Oh noeee... failure!\n  }\n});\n```\n\nAPI calls will also pass back jQuery deferred objects, so these can be used as well:\n\n```\ntwitter.getHomeTimeline().then(function() {\n  // You're done!\n});\n```\n\nAny route can be set up with any level of context. These contexts are always optional, and will only be\nadded if they exist when passed as params:\n\n```\ntwitter.get(':user/:list_id/members');\ntwitter.getMembers({ user: 'bob', list_id: 5 });\n\n> GET http://api.twitter.com/bob/5/members.json\n```\n\nTo connect routes, the 4 main HTTP verbs, \"GET\", \"POST\", \"PUT\", and \"DELETE\" are supported, and map to\nthe method names \"get\", \"create\", \"update\", and \"destroy\", respectively (note \"del\", which is a reserved\nkeyword):\n\n```\ntwitter.post(':user/:list_id/members');\ntwitter.del(':user/:list_id/members');\n\ntwitter.createMember({ user: 'bob', list_id: 5, member_name: 'harry' });\n\n> POST http://api.twitter.com/bob/5/members.json?member_name=harry\n\ntwitter.destroyMember({ user: 'bob', list_id: 5 });\n\n> DELETE http://api.twitter.com/bob/5/members.json\n```\n\n\"resource\" serves as a shortcut to all 4 HTTP verbs:\n\n\n```\ntwitter.resource('member');\n\ntwitter.getMember();     > GET     http://api.twitter.com/member.json\ntwitter.createMember();  > POST    http://api.twitter.com/member.json\ntwitter.updateMember();  > PUT     http://api.twitter.com/member.json\ntwitter.destroyMember(); > DELETE  http://api.twitter.com/member.json\n```\n\nIf a resource is a collection, passing `collection: true` in the options for \"resource\" will create standard\ncollection routes including an \"index\" method:\n\n\n```\ntwitter.resource('status', { collection: true });\n\ntwitter.getStatus();              > GET     http://api.twitter.com/status.json\ntwitter.getStatus({ id: 3});      > GET     http://api.twitter.com/status/3.json\ntwitter.createStatus();           > POST    http://api.twitter.com/status.json\ntwitter.updateStatus({ id: 3 });  > PUT     http://api.twitter.com/status/3.json\ntwitter.destroyStatus({ id: 3 }); > DELETE  http://api.twitter.com/status/3.json\n```\n\nIf a \"collection\" is omitted, it will attempt to be intelligently detected by the pluralization of the\nresource passed. In this case, pluralization of the methods will also use intelligent detection:\n\n```\ntwitter.resource('members');\n\ntwitter.getMembers();              > GET     http://api.twitter.com/members.json\ntwitter.getMembers({ id: 3});      > GET     http://api.twitter.com/members/3.json\ntwitter.createMembers();           > POST    http://api.twitter.com/members.json\ntwitter.updateMembers({ id: 3 });  > PUT     http://api.twitter.com/members/3.json\ntwitter.destroyMembers({ id: 3 }); > DELETE  http://api.twitter.com/members/3.json\n```\n\n\n\n... more docs to come!\n\n"}
{"name":"AQ","readme":"Automate QUnit tests"}
{"name":"Accessor","readme":"# Accessor 0.1.0\n\nA database wrapper, provide easy access to database without writing SQL code\n\n\n## Install & Setup\n\n1. Create a config directory under your application, e.g.\n   \n    \tbuGit/config/\n2. Then, create a database.js under config directory we just created, which contains like:\n\n\t\tvar databaseConfig = { \n    \t\tuser: \"YOUR_DATABASE_USER\",\n\t\t    password: \"YOUR_DATABASE_PASSWORD\",\n\t    \tdatabase: \"TARGET_DATABASE\",\n\t    \thost: \"localhost\",\n    \t\tport: 3306\n\t\t};\n\n\t\tmodule.exports = databaseConfig;\n\n3. Now, Accessor is ready to use.\n\n\n## Usage\n\n1. Require the Accessor module in your script\n\n\t\tvar Accessor = require(\"Accessor\");\n\n2. Place constructor where you need the Accessor\n\n\t\tvar tester = Accessor(\"YOUR_TARGET_TABLE\");\n\n3. After initialization, Accessor will try to obtain the schema, and store it to verify  column existence while updating or creating.\n\n### Methods\n\n#### tester.select( {options}, callback(err, data, fields) );\n\nPerform a select query to obtain data, for example:\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar options = {\n\t\t\twhere: [\n\t\t\t\t[\"id\", \">\", 10],\n\t\t\t\t\"AND\",\n\t\t\t\t[\"email\",\"LIKE\",\"%@gmail.com\"]\n\t\t\t],\n\t\t\t\n\t\t\tlimit: 100,\n\t\t\toffset: 50,\n\t\t\t\n\t\t\tfields: [\"name\"]\n\t\t};\n\t\t\n\t\ttester.select( options, function(err, data, fields) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn data;\n\t\t} );\n\nCurrently, {options} has implements following attributes:\n \n * where\n * limit\n * offset\n * fields \t\t\n \n##### Note\n \nOptions may omit which retrieve all records, i.e.\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\ttester.select( function(err, data, fields) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn data;\n\t\t} );\n\n#### tester.create( {dataObject}, callback(err, info) );\n\nInsert data record by given dataObject\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar dataObject = {\n\t\t\tname: \"bu\",\n\t\t\temail: \"bu@hax4.in\",\n\t\t\tnonSchemaColumn: \"test\"\n\t\t};\n\t\t\n\t\ttester.create( dataObject, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.insertId;\n\t\t} );\n\n##### Note\n\n* On above example, we give a non-exist column called \"nonSchemaColumn\" to Accessor, which may cause hangup if we insert that to sql query.\n\n\tIndeed, Accessor will try to check each attribute and ignore them if not exists, and that should print *(on console)*\n\t\n\t\tWarning: nonSchemaColumn is not in database schema, and is not inserted into queryset\n\n\n#### tester.update( {options}, {updated_dataObject}, callback(err, info) );\n\nUpdate records filter by option.where with updated_dataObject\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar dataObject = {\n\t\t\temail: \"bu@hax4.in\",\n\t\t\tnonSchemaColumn: \"test\"\n\t\t};\n\t\t\n\t\tvar options = {\n\t\t\twhere: [ \n\t\t\t\t[\"name\", \"=\", \"bu\"] \n\t\t\t],\n\t\t};\n\t\t\n\t\ttester.update( options, dataObject, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\t\t\n##### Note\n\n* On above example, we give a non-exist column called \"nonSchemaColumn\" to Accessor, which may cause hangup if we update that in sql query.\n\n\tIndeed, Accessor will try to check each attribute and ignore them if not exists, and that should print *(on console)*\n\t\n\t\tWarning: nonSchemaColumn is not in database schema, and is not inserted into queryset\n\n* If options is omitted, it will update all records. (due to no filter)\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar dataObject = {\n\t\t\temail: \"bu@hax4.in\",\n\t\t\tnonSchemaColumn: \"test\"\n\t\t};\n\t\n\t\ttester.update( {}, dataObject, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\n\n#### tester.remove( {options}, callback(err, info) );\n\nRemove records filter by options.where\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar options = {\n\t\t\twhere: [ \n\t\t\t\t[\"name\", \"=\", \"bu\"] \n\t\t\t],\n\t\t};\n\t\t\n\t\ttester.update( options, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\t\t\n##### Note\n\n* If options is omitted, it will remove all records. (due to no filter)\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\n\t\ttester.remove( {}, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\n### LICENSE\n\nCopyright (c) 2012 Buwei Chiu <bu@hax4.in>\nLicensed under the MIT License\n\n### TODO\n\n* Check in where statement\n* Log\n"}
{"name":"Accessor_MySQL","readme":"# Accessor_MySQL 0.1.0\n\nA MySQL database wrapper, provide easy access to database without writing SQL code\n\n\n## Install & Setup\n\n1. Install through npm, following command will do that:\n\n\t\tnpm install Accessor_MySQL\n\t\t\n2. Create a config directory under your application, and create a database.js under that, which may contain like:\n\n\t\tvar databaseConfig = { \n    \t\tuser: \"YOUR_DATABASE_USER\",\n\t\t    password: \"YOUR_DATABASE_PASSWORD\",\n\t    \tdatabase: \"TARGET_DATABASE\",\n\t    \thost: \"localhost\",\n    \t\tport: 3306\n\t\t};\n\n\t\tmodule.exports = databaseConfig;\n\n3. Now, Accessor_MySQL is ready to use.\n\n\n## Usage\n\n1. Require the Accessor module in your script\n\n\t\tvar Accessor = require(\"Accessor\");\n\n2. Place constructor where you need the Accessor. Do not forget to specify your database engine.\n\n\t\tvar tester = Accessor(\"YOUR_TARGET_TABLE\", \"MySQL\");\n\n3. After initialization, Accessor will try to obtain the schema, and store it to verify  column existence while updating or creating.\n\n### Methods\n\n#### accessor.select( {options}, callback(err, data, fields) );\n\nPerform a select query to obtain data, for example:\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar options = {\n\t\t\twhere: [\n\t\t\t\t[\"id\", \">\", 10],\n\t\t\t\t\"AND\",\n\t\t\t\t[\"email\",\"LIKE\",\"%@gmail.com\"]\n\t\t\t],\n\t\t\t\n\t\t\tlimit: 100,\n\t\t\toffset: 50,\n\t\t\t\n\t\t\tfields: [\"name\"]\n\t\t};\n\t\t\n\t\ttester.select( options, function(err, data, fields) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn data;\n\t\t} );\n\nCurrently, {options} has implements following attributes:\n \n * where\n * limit\n * offset\n * fields \t\t\n \n##### Note\n \nOptions may omit which retrieve all records, i.e.\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\ttester.select( function(err, data, fields) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn data;\n\t\t} );\n\n#### accessor.create( {dataObject}, callback(err, info) );\n\nInsert data record by given dataObject\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar dataObject = {\n\t\t\tname: \"bu\",\n\t\t\temail: \"bu@hax4.in\",\n\t\t\tnonSchemaColumn: \"test\"\n\t\t};\n\t\t\n\t\ttester.create( dataObject, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.insertId;\n\t\t} );\n\n##### Note\n\n* On above example, we give a non-exist column called \"nonSchemaColumn\" to Accessor, which may cause hangup if we insert that to sql query.\n\n\tIndeed, Accessor will try to check each attribute and ignore them if not exists, and that should print *(on console)*\n\t\n\t\tWarning: nonSchemaColumn is not in database schema, and is not inserted into queryset\n\n\n#### accessor.update( {options}, {updated_dataObject}, callback(err, info) );\n\nUpdate records filter by option.where with updated_dataObject\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar dataObject = {\n\t\t\temail: \"bu@hax4.in\",\n\t\t\tnonSchemaColumn: \"test\"\n\t\t};\n\t\t\n\t\tvar options = {\n\t\t\twhere: [ \n\t\t\t\t[\"name\", \"=\", \"bu\"] \n\t\t\t],\n\t\t};\n\t\t\n\t\ttester.update( options, dataObject, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\t\t\n##### Note\n\n* On above example, we give a non-exist column called \"nonSchemaColumn\" to Accessor, which may cause hangup if we update that in sql query.\n\n\tIndeed, Accessor will try to check each attribute and ignore them if not exists, and that should print *(on console)*\n\t\n\t\tWarning: nonSchemaColumn is not in database schema, and is not inserted into queryset\n\n* If options is omitted, it will update all records. (due to no filter)\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar dataObject = {\n\t\t\temail: \"bu@hax4.in\",\n\t\t\tnonSchemaColumn: \"test\"\n\t\t};\n\t\n\t\ttester.update( {}, dataObject, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\n\n#### accessor.remove( {options}, callback(err, info) );\n\nRemove records filter by options.where\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\t\n\t\tvar options = {\n\t\t\twhere: [ \n\t\t\t\t[\"name\", \"=\", \"bu\"] \n\t\t\t],\n\t\t};\n\t\t\n\t\ttester.update( options, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\t\t\n##### Note\n\n* If options is omitted, it will remove all records. (due to no filter)\n\n\t\t// test_table schema: id, name, email\n\n\t\tvar tester = Accessor(\"test_table\");\n\t\n\t\ttester.remove( {}, function(err, info) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\t\n\t\t\t\n\t\t\treturn info.affectedRows;\n\t\t} );\n\n### LICENSE\n\nCopyright (c) 2012 Buwei Chiu <bu@hax4.in>\n\nLicensed under the MIT License\n"}
{"name":"Accessor_Singleton","readme":"Accessor_Singleton\n==================\n\nA instance pool for node.js Accessor module\n\nInstall\n=====================\n\n1. npm install Accessor_Singleton\n\nUsage\n====================\n\n1. Replace original module require statement from\n\n\tvar Accessor = require(\"Accessor\");\n\nto\n\t\n\tvar Accessor = require(\"Accessor_Singleton\")\n\n2. Then, everytime you call the Acessor, it will check if there had been an instance (avoid connnect to server everytime)\n"}
{"name":"AssetPipeline","readme":"AssetPipeline\n=============\n\n  Smashes, Caches, Slices, & Dices your static assets.\n\n  The asset pipeline is a simple middleware provider that serves static assets.\nIt has modules for file version caching, compiling things like coffeescript and\nstylus or sass, minifying, obfuscating, and appending scripts and stylesheets,\nslicing up the AST of javascript files, to remove sensitive code before it's\nsent to the client, etc.  And also can send notifications to the client when a\nfile changes (not implemented). Perhaps in order to dynamically reload stylesheets, scripts, or\nhtml templates.\n\n  The second part is a clientside component which creates a list of script/stylesheet\ntags and watches for changes from the server.\n\nExample\n=======\n\n```javascript\n  //adds all the files in app\n  AssetPipe.script()\n    .root(__dirname + \"../app/\")\n    .addFiles(__dirname + \"../app\")\n    .process(CompileCoffee)\n    .process(SliceSensitiveMethods)\n    .process(Modularize)\n    .process(Minify)\n\n```\n"}
{"name":"Backbone.Aggregator","readme":"# Backbone.aggregator\n\nA collection that contains pointers to elements to other collections models.\n\n## Use case?\n\nHaving a polymorphic collection that just points to existant elements in your state.\n\nFor instance having a *Recent activities* that mixes *Tasks* and *Activities*,\nyou want to be sure that adding, deleting or changing a Task or Activity will\nupdate Recent Activities.\n\n## How does it work?\n\nThe API is almost the same as `Backbone.Collection`.\n\n  * You must specify which `collection` the model belongs.\n  * Each model must have a `type` attribute.\n  * The aggregator collection must implement the `collections` method. This will return a mapping of `type` and `collection`.\n  * If you want to `get` a model from the aggregator collection you must specify the type too.\n\n``` javascript\nModels.Task = Backbone.Model.extend({initialize: function () {\n  this.collection = tasks;\n}});\n\nModels.Activity = Backbone.Model.extend({initialize: function () {\n  this.collection = activities;\n}});\n\nCollections.Tasks = Backbone.Collection.extend({model: Models.Task});\nCollections.Activities = Backbone.Collection.extend({model: Models.Activity});\n\nCollections.Threads = Backbone.Aggregator.extend({\n  model: function (attr, opt) {\n    return new Models[attr.type](attr, opt);\n  }\n, collections: function () {\n    return {Task: tasks, Activity: activities};\n  }\n});\n\ntasks = new Collections.Tasks();\nactivities = new Collections.Activities();\nthreads = new Collections.Threads();\n```\n\n## Tests\n\nYou must have node installed in order to run the tests.\n\n```\nnpm install\nmake\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2011 Pau Ramon <masylum@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}
{"name":"Backbone.Chosen","readme":"Backbone.Chosen\n===============\n\nOne Collection different models, mapped easy via configuration\n\n[![Build Status](https://secure.travis-ci.org/asciidisco/Backbone.Chosen.png?branch=master)](http://travis-ci.org/asciidisco/Backbone.Chosen)"}
{"name":"Backbone.Subset","readme":"# Backbone.Subset\n\nA subset collection that contains pointers to models from a parent collection.\n\n## Use case?\n\nHaving a collection that represents only a subset of your models.\n\nFor instance having a *Archived tasks*, you want to be sure that adding, deleting\nor changing a *Task* will update that subset collection according to a given `sieve`\n\n## How does it work?\n\nThe API is almost the same as `Backbone.Collection`.\n\n  * You must implement a `parent` function that returns the collection the subset belongs.\n  * You must implement a `sieve` function that will be used to filter the parent collection.\n  * You can pass the option `{noparent: true}` on doing an `add` or a `remove` if you don't want this action to bubble to the parent collection.\n\n``` javascript\nModels.Task = Backbone.Model.extend({\n  initialize: function () {\n    this.collection = tasks;\n  }\n, isArchived: function () {\n    return this.get('archived');\n  }\n});\n\nCollections.Tasks = Backbone.Collection.extend({model: Models.Task});\nCollections.ArchivedTasks = Backbone.Subset.extend({\n  parent: function () {\n    return tasks;\n  }\n, sieve: function (task) {\n    return task.isArchived();\n  }\n});\n\ntasks = new Collections.Tasks();\narchivedTasks = new Collections.ArchivedTasks();\n\ntasks.reset([{archived: true}, {archived: false}]);\n\nassert.equal(task.length, 2);\nassert.equal(archivedTasks.length, 1);\n```\n\n## Tests\n\nYou must have node installed in order to run the tests.\n\n```\nnpm install\nmake\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2011 Pau Ramon <masylum@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}
{"name":"BandGravity","readme":"gravity\n======="}
{"name":"BetterRegExp","readme":"![status](https://secure.travis-ci.org/wearefractal/BetterRegExp.png?branch=master)\n\n## Information\n\n<table>\n<tr> \n<td>Package</td><td>BetterRegExp</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Utility wrapper over RegExp</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.4</td>\n</tr>\n</table>\n\n## Usage\n\n### Constructor\n\n```coffee-script\nBetterRegExp = require \"BetterRegExp\"\n\n# Create from RegExp\nnew BetterRegExp /^\\s*\\d+\\s*$/gi\nnew BetterRegExp /^\\s*\\d+\\s*$/\nnew BetterRegExp /^\\s*\\d+\\s*$/, \"gi\"\n\n# Create from String\nnew BetterRegExp \"^\\s*\\d+\\s*$\", \"gi\"\nnew BetterRegExp \"^\\s*\\d+\\s*$\"\"\n```\n\n### Flags\n\n```coffee-script\npat = new BetterRegExp /^\\s*\\d+\\s*$/g\n\npat.addFlag('i') # Adding flags\npat.removeFlag('g') # Removing flags\npat.flags === 'i' # List flags\npat.addFlag('gm').removeFlag('i') # Chaining\n\n# There are aliases to help make chaining easier\npat.global() = pat.g() = pat.addFlag('g')\npat.ignoreCase() = pat.i() = pat.addFlag('i')\npat.multiline() = pat.m() = pat.addFlag('m')\npat.sticky() = pat.y() = pat.addFlag('y')\npat.extended() = pat.x() = pat.addFlag('x')\npat.g().i() = pat.addFlag('gi')\npat.i().m().x() = pat.addFlag('imx')\n```\n\n### Misc.\n\n```coffee-script\n# Escaping\nexp = BetterRegExp.escape \"test\"\npat = new BetterRegExp exp, \"g\"\n\n# Executing is the same\npat.exec \"test\"\n\n# Testing is the same\npat.match \"test\"\n```\n\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2012 Fractal <contact@wearefractal.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}
{"name":"Birbal","readme":"#Birbal\n\nA clever little framework for Node.js\n\n* Handles simple routing for you\n* Doesn't restrict you at all.\n\nInstall with:\n\n    npm install -g birbal\n\nHave fun!\n\nQuick example:\n    var akbar = require(\"Birbal\")\n    function hi() {\n        return \"Hello!\";\n    }\n\n    var routes = {\"/hi\":[hello, \"GET\"]}\n\n    akbar.Birbal();\n\nAwesome!\n\nHere's what coming really soon:\n\n* POST and GET variable access\n* Integration with Jade, Haml.JS and Moustache\n* Integration with Redis and MongoDB\n* Basically turning Birbal into a microframework\n\nWatch this project to keep in touch :) \n"}
{"name":"Brocket","readme":"# Brocket - A self-hosting and self-extensible (meta)class system for Javascript\n\n## Install\n\n```bash\nnpm install Brocket\n```\n\nor for a global install\n\n```bash\nnpm install -g Brocket\n```\n\n## What is it?\n\nBrocket aims to make OO programming in JavaScript (or Coffeescript) easier and\nmore fun. It allows you to declare classes using a simple declarative DSL-ish\nsyntax.\n\nUnder the hood, Brocket is based on a powerful meta-model. Every aspect of\nBrocket is itself a class, providing powerful introspectiona nd extension\nfeatures.\n\nBrocket is a port of Perl's [Moose](http://moose.perl.org).\n\n### Alpha Warning\n\nThis is an early version of Brocket. A lot of it isn't done. In particular, it\nis not yet self-bootstrapping, so you cannot extend Brocket by using\nBrocket-based classes (this will be coming in the future), and it does not\nprovide any code generation features to make things faster.\n\nIn other words, it's incomplete and slow.\n\n## Synopsis\n\nCreating a class with Brocket:\n\n```javascript\nBrocket = require(\"Brocket\");\nPerson = Brocket.makeClass( \"Person\", function (B) {\n    B.has( \"firstName\", { access: \"ro\" } );\n    B.has( \"lastName\",  { access: \"ro\" } );\n    B.has( \"age\",       { access: \"ro\", default: 0 } );\n\n    B.method( \"greet\", function () {\n        console.log \"Hi, my name is \" + this.firstName() + \".\";\n    } );\n} );\n\nUser = Brocket.makeClass( \"User\", function (B) {\n    B.extends(Person);\n    B.has( \"username\",  { access: \"rw\" } );\n    B.has( \"password\",  { access: \"rw\" } );\n    B.has( \"lastLogin\", { access: \"rw\" } );\n\n    B.method( \"login\", function (password) {\n        if ( password != this.password() ) {\n            return false;\n        }\n\n        this.lastLogin( new Date );\n\n        return true;\n    } );\n} );\n\nbob = new User ( {\n    firstName: \"Bob\",\n    lastName:  \"Smith\",\n    username:  \"bob.smith\",\n    password:  \"password\"\n} );\n\nbob.greet()\n\nif ( bob.login(password) ) {\n    ....\n}\n```\n\nHere's a class example in CoffeeScript\n\n```coffeescript\nBrocket = require \"Brocket\"\nPerson = Brocket.makeClass \"Person\", (B) ->\n    B.has \"firstName\", access: \"ro\"\n    B.has \"lastName\",  access: \"ro\"\n    B.has \"age\",       access: \"ro\", default: 0\n\n    B.method \"greet\", ->\n        console.log \"Hi, my name is #{ @firstName() }.\"\n```\n"}
{"name":"CallbackRouter","readme":"**CallbackRouter** routes callbacks\n"}
{"name":"Cap","readme":"# Cap\n\nA language that compiles to JavaScript, for use in the browser and node.\n\n## Intro\n\nCap is a language built on top of Javascript. It aims to unify the underlying concepts of\nfunctional programming with an elegant and succint syntax.\n\n# Quickstart\n\nThe Cap compiler is implemented in [node](http://nodejs.org), get that first (pre-compiled binaries available for Win/Mac, Linux you have to build yourself). Node comes with the package manager `npm` which you can use to install the Cap compiler.\n\nThen:\n\n\tnpm install cap -g\n\nProvided you used the global flag `-g` and the path `/usr/local/bin` is in your path, `capc` should now be available. Verify by running `capc -h` which should print something similar to the following:\n\n    Usage: capc [options] [source-file]\n\n    Options:\n\n      -h, --help       output usage information\n      -V, --version    output the version number\n      -p, --printtree  print the syntax tree instead of compiling\n\n### Editor Syntax\n\nThere is a syntax mode for Textmate and SublimeText 2. It is located in `editor/Cap.tmLanguage`."}
{"name":"ChartTime","readme":"# ChartTime #\n\nCopyright (c) 2012, Lawrence S. Maccherone, Jr.\n\n_Time axis creation/manipulation for charts_\n\n## Credits ##\n\nAuthors:\n\n* [Larry Maccherone](http://maccherone.com) (Larry @at@ Maccherone .dot. com)\n* Jennifer Maccherone\n\nRunning:\n\n* [timezoneJS](https://github.com/mde/timezone-js) - library for [tz](http://www.twinsun.com/tz/tz-link.htm) parsing\n* [Node.js](http://nodejs.org/)\n* [CoffeeScript](http://coffeescript.org/)\n\nDeveloping/Documenting:\n\n* [coffeedoc](https://github.com/lmaccherone/coffeedoc) (Larry Maccherone's fork) forked from [coffeedoc](https://github.com/omarkhan/coffeedoc)\n* [coffeedoctest](https://github.com/lmaccherone/coffeedoctest) (by Larry Maccherone)\n* [nodeunit](https://github.com/caolan/nodeunit)\n\n## Documentation and source code ##\n\n* [API Documentation](http://lmaccherone.github.com/ChartTime/docs/ChartTime.html)\n* [github.com/lmaccherone/ChartTime](https://github.com/lmaccherone/ChartTime)\n\n## Features ##\n\n* Generate the values for time series chart axis\n* Allows for custom granularities like release/iteration/iteration_day\n* Knockout weekends and holidays\n* Knockout non-work hours\n* Drill up and down granularity (coneceptually supported by ChartTime, consumed by Lumenize)\n* Work with precision around timezone differences\n* Month is 1-indexed instead of 0-indexed like Javascript's Date object\n* Date/Time math (add 3 months, subtract 2 weeks, etc.)\n* Tested\n* Documented\n\n## Granularity ##\n\nEach ChartTime object has a granularity. This means that you never have to\nworry about any bits lower than your specified granularity. A day has only\nyear, month, and day segments. You are never tempted to specify 11:59pm\nto specify the end of a day-long timebox.\n\nChartTime supports the following granularities:\n\n* `year`\n    * `month`\n        * `day`\n            * `hour`\n               * `minute`\n                   * `second`\n                       * `millisecond`\n    * `quarter` (but not quarter_month, day, etc.)\n    * `week` (ISO-8601 style week numbering)\n       * `week_day` (Monday = 1, Sunday = 7)\n\nAlso, you can define your own custom hierarchical granularities, for example...\n\n* `release`\n   * `iteration`\n      * `iteration_day`\n  \n## Timezone precision ##\n\nIt's very hard to do filtering and grouping of time-series data with timezone precision. \n\nFor instance, 11pm in California on December 25 (Christmas holiday) is 2am December 26 (not a holiday)\nin New York. This also happens to be 7am December 26 GMT. If you have an event that occurs at \n2011-12-26T07:00:00.000Z, then you need to decide what timezone to use as your context before you \ndecide if that event occured on Christmas day or not. It's not just holidays, where this can burn you.\nDeciding if a piece of work finished in one iteration versus another can make a difference for\nyou iteration metrics. The iteration metrics for a distributed team should look the same regardless\nof whether it was generated in New York versus Los Angeles... versus Bangalore.\n\nThe javascript Date object lets you work in either the local time or Zulu (GMT/UTC) time but it doesn't let you\ncontrol the timezone. Do you know the correct way to apply the timezone shift to a JavaScript Date Object? \nDo you know when Daylight Savings Time kicks in and New York is 4 hours shifted from GMT instead of 5? Will\nyou remember to do it perfectly every time it's needed in your code?\n\nIf you need this precision, ChartTime helps by clearly delineating the moment when you need to do \ntimezone manipulation... the moment you need to compare two or more dates. You can do all of your\nholiday/weekend knockout manipulation without regard to timezone and only consider the timezone\nupon comparison. \n\n## Month is 1-indexed as you would expect ##\n\nJavascript's date object uses 0 for January and 11 for December. ChartTime uses 1 for January and 12 for December...\nwhich is what ISO-8601 uses and what humans expect. Everyone who works with the javascript Date Object at one\npoint or another gets burned by this.\n\n## Week support ##\n\nChartTime follows ISO-8601 where ever it makes sense. Implications of using this ISO format (paraphrased info from wikipedia):\n\n* All weeks have 7 days (i.e. there are no fractional weeks).\n* Any given day falls into a single week which means that incrementing across the year boundary in week\n  granularity is without gaps or repeats.\n* Weeks are contained within a single year. (i.e. weeks are never spit over two years).\n* The above two implications also mean that we have to warp the boundaries of the year to accomplish this. In week\n  granularity dates may appear in a different year than you would expect and some years have 53 weeks.\n* The date directly tells the weekday.\n* All years start with a Monday and end with a Sunday.\n* Dates represented as yyyyWww-d can be sorted as strings.\n\n**In general, it just greatly simplifies the use of week granularity in a chart situation.**\n\nThe only real downside to this approach is that USA folks expect the week to start on Sunday. However, the ISO-8601 spec starts\neach week on Monday. Following ISO-8601, ChartTime uses 1 for Monday and 7 for Sunday which aligns with\nthe US standard for every day except Sunday. The US standard is to use 0 for Sunday.\n\n## Basic usage ##\n\n    {ChartTime, ChartTimeIterator, ChartTimeRange} = require('charttime')\n    \n    d1 = new ChartTime({granularity: 'day', year: 2011, month: 2, day: 28})\n    console.log(d1.toString())\n    # 2011-02-28\n    \nYou can use the string short-hand rather than spell out the segments seperately. The granularity\nis automatically inferred from how many segments you provide.\n\n    d2 = new ChartTime('2011-03-01')\n    console.log(d2.toString())\n    # 2011-03-01\n    \nIncrement/decrement and compare ChartTimes without regard to timezone\n\n    console.log(d1.$gte(d2)) \n    d1.increment()\n    console.log(d1.$eq(d2))\n    # false\n    # true\n\nDo math on them.\n    \n    d3 = d1.add(5)\n    console.log(d3.toString())\n    # 2011-03-06\n\nGet the day of the week.\n\n    console.log(d3.dowString())\n    # Sunday\n    \nSubtraction is just addition with negative numbers.\n\n    d3.addInPlace(-6)\n    console.log(d3.toString())\n    # 2011-02-28\n\nIf you start on the last day of a month, adding a month takes you to the last day of the next month, \neven if the number of days are different.\n    \n    d3.addInPlace(1, 'month')  \n    console.log(d3.toString())\n    # 2011-03-31\n    \nDeals well with year-granularity math and leap year complexity.\n\n    d4 = new ChartTime('2004-02-29')  # leap day\n    d4.addInPlace(1, 'year')  # adding a year takes us to a non-leap year\n    console.log(d4.toString())\n    # 2005-02-28\n    \nWeek granularity correctly wraps and deals with 53-week years.\n\n    w1 = new ChartTime('2004W53-6')\n    console.log(w1.inGranularity('day').toString())\n    # 2005-01-01\n    \nConvert between any of the standard granularities. Also converts custom granularities (not shown) to\nstandard granularities if you provide a `rataDieNumber()` function with your custom granularities.\n\n    d5 = new ChartTime('2005-01-01')  # goes the other direction also\n    console.log(d5.inGranularity('week_day').toString())\n    # 2004W53-6\n    \n    q1 = new ChartTime('2011Q3')\n    console.log(q1.inGranularity('millisecond').toString())\n    # 2011-07-01T00:00:00.000\n    \n## Timezones ##\n\nChartTime does timezone sensitive conversions. You must set the path to the tz files before doing any timezone sensitive comparisons.\n\n    ChartTime.setTZPath('../vendor/tz')\n    \n    console.log(new ChartTime('2011-01-01').getJSDate('America/New_York'))\n    # Sat, 01 Jan 2011 05:00:00 GMT\n    \n## Iterating over ranges skipping weekends (non-workdays), holidays and non-workhours ##\n\n    r = new ChartTimeRange({\n      start: new ChartTime('2011-01-02'),\n      pastEnd: new ChartTime('2011-01-07'),\n      workDays: 'Monday, Tuesday, Thursday, Friday',  # very strange work week\n      holidays: [\n        {month: 1, day: 1},  # Notice the lack of a year specification\n        {year: 2011, month: 1, day: 3}  # Got January 3 off also in 2011\n      ]\n    })\n    \nNow let's get an iterator over this range.\n    \n    i = r.getIterator('ChartTime')\n    \n    while i.hasNext()\n      console.log(i.next().toString()) \n           \n    # 2011-01-04\n    # 2011-01-06\n\n# ChartTime utils #\nCopyright (c) Lawrence S. Maccherone, Jr., 2012\n"}
{"name":"Classy","readme":"Prime with Class\n================\n\nMake Prime Classy.\n\nIf you're used to MooTools 1.x Class, and think [prime](https://github.com/mootools/prime)\nis too basic? Classy will give you your familiar features:\n\n- Mixins (Implements)\n- .parent (Will wrap methods)\n- Will clone/reset objects and arrays in the prototype to prevent shared objects\n- Alias `Implements`, `Extends` and `initialize`\n- Tries to be compatible with the MooTools 1.x Class API.\n\nWrapping functions and reseting are not very elegant however.\nI would advice to use the basic `prime` wherever possible.\n\n### TODO\n\n- Implement `Class.Mutators`\n- Create another Classy implementation that will break 1.x API\n\t- I'd rather see a `.parent` without wrapping\n\t- Don't reset/clone objects\n\t- Create a nice packages with some nice additional goodies like:\n\t\t- Class.Bind (by @cpojer)\n\t\t- …\n\n"}
{"name":"Cls","readme":"Cls\n--------\nAn interface for classical object oriented programming in JavaScript.\n\nAPI\n---------\n<h3>Creating a class with Cls</h3>\n\n``` js\nvar Slideshow, sshow;\n\nSlideshow = Cls({\n  methods: {\n    constructor: function(slides, effect) {\n      this.slides = slides;\n      this.effect = effect;\n    },\n    goTo: function(slide) {\n      domSelector('#id').nextSlide(slide, this.effect);\n    }\n  },\n  statics: {\n    version: '0.0.1'\n  }\n});\n\nsshow = new Slideshow(['top_story', 'sport', 'politics'], 'fade');\n```\n\n<h3>Extending that class</h3>\n\n``` js\nvar MegaSlideshow, mshow;\n\nMegaSlideshow = Cls({\n  uber: Slideshow,\n  methods: {\n    goTo: function(slide) {\n      var that = this;\n\n      this.changePageTitle(slide, function() {\n        that.inherited('next');\n      });\n    }\n  }\n});\n```\n\n<h3>Mixins</h3>\n\nYou can override / add methods to a class/object (any object) using Cls.mixin(obj, { /* methods */ }):\n\n``` js\nvar laptop = {\n  os: 'OSX Lion',\n  processor: 'i5'\n};\n\nlaptop = Cls.mixin(laptop, { memory: '8GB', cores: 5 });\n```\n\nEnvironments\n------------\nYou can use Cls in the browser or in a Node.js app.\n\n<h3>In the browser</h3>\n\n``` html\n<script src=\"path/to/cls.js\"></script>\n<!-- Cls() is exposed as a global var -->\n\n<script type=\"text/javascript\">\n  var Foo = Cls({ ... });\n  ...\n</script>\n```\n\n<h3>Node.js</h3>\n\n``` js\nvar Cls = require('Cls');\n\nvar Foo = Cls({ ... });\n```\n\nInstall the Package!\n--------------------\nInstall the package with npm manually or by including the app into your package.json dependencies.\n\n    $ npm install Cls\n\n    // then, in your Node app\n    var Cls = require('Cls')\n\nDevelopers\n----------\n\n    $ npm install .\n    $ npm test\n    $ npm run-script build\n\nOnly edit the file `src/cls.js`.\nFor more examples check `test/tests.js`.\n\nWhy did I write this library?\n-----------------------------\n\n- prototype is a long word\n- People are used to classes from other languages\n- Although CoffeeScript's Class implementation is nice, if you have 10 files that use OOP the __extends function is defined 10 times\n- I don't like the functionality provided by most of the similar OOP libraries or I consider them bloated\n\nBonus - for CoffeeScript fans\n-----------------------------\n```js\nlog = console.log\nCls = require './cls'\n\nAnimal = Cls\n  methods:\n    constructor: (@name) ->\n\n    move: (meters) ->\n      log \"#{@name} moved #{meters} meters\"\n\n  statics:\n    types: ['vertebrates', 'invertebrates']\n\nSnake = Cls\n  uber: Animal\n  methods:\n    move: ->\n      log \"Slithering...\"\n      setTimeout =>\n        this.inherited 'move', [5]\n      , 300\n\nHorse = Cls\n  uber: Animal\n  methods:\n    move: ->\n      log \"Galloping...\"\n      args = arguments\n      setTimeout =>\n        this.inherited 'move', args\n      , 1500\n\nsam = new Snake \"Sammy the Python\"\ntom = new Horse \"Tommy the Palomino\"\n\nsam.move()\ntom.move(45)\n```\n"}
{"name":"CouchDBChanges","readme":"# Write CouchDB Changes Listeners. Easy.\n\n    var changes = require(\"CouchDBChanges\");\n    changes.follow(\"database\", function(change) {\n       // do whatever you want with the change.\n    });\n\nWow, easy!\n\nCouchDB, The Definitive Guide has\n[a chapter on the Changes feed](http://guide.couchdb.org/draft/notifications.html).\n\n\n## Wha?\n\nCouchDB has this amazing feature called the “Changes Feed”. Think of\n`git log` for your database. There’s all sorts of awesome you can do\nwith this. For example, have a database called `outbox` and connect\na CouchDB changes listener to it and whenever your application creates\na new document, say\n\n    {\n        \"from\": \"me@example.com\",\n        \"to\": \"you@example.com\",\n        \"subject\": \"Hey there!\",\n        \"body\": \"I think you get the idea\"\n    }\n\nthe changes listener then gets notified right when the document gets\ncreated, but asynchronously from your application and send the email\nthat is described. When the email is sent, it can write back a new field\n\n    \"status\": \"sent\"\n\nor, if anything went wrong:\n\n    \"status\": \"error\",\n    \"error_message\": \"that email address is bogus you twat!\"\n\nSo yeah, quick example, but there’s tons of things you can do with this.\nWe should collect nice examples, but for now you can check out\n<https://github.com/janl/couchdb-external-CreateUserDatabase>.\n\n## API\n\n`follow(database, change_cb, follow_options, changes_options)`\n\n * `database`: (string) name of the database\n * `change_cb`: (callable) function to call for each change\n * `follow_options`: (object) configurations for following {\n     persistent_since: (bool) false whether or not to persist the latest\n     `seq_id` from the server. This allows us to avoid processing a\n     change more than once.\n }\n * `changes_options`:  (object) parameters for CouchDB’s `_changes` API.\n   See <http://wiki.apache.org/couchdb/HTTP_database_API#Changes>.\n\n\n## Next?\n\n* Make `persistent_since` storage configurable.\n\n\n## Thanks\n\nThis is just a very thin wrapper around Jason Smith’s / Iris Couch’s\nexcellent [`follow` library](https://github.com/iriscouch/follow).\n\nThanks Jason!\n\n\n## License & Copyright\n\n(c) 2012 Jan Lehnardt <jan@apache.org>  \nLicensed under the Apache License 2.0.\n"}
{"name":"Cuber","readme":"##Cuber.coffee\nModel of a 3x3 Rubik's cube written in CoffeeScript\n\n### Usage\n**Require Cuber**: \n`Cuber = require './cuber.coffee'`\n\n\n**Initialize a cube**: \n`cube = new Cube \"Patrick\\'s Rubik\\'s Cube\"\"`\n\n\n**Display cube**: \n`cube.display()`\n\n\n**Scramble cube**: \n`cube.scramble(100)` (100 random turns)\n\n\n**Check if a cube is solver**: \n`cube.check()`\n\n**Cheat**\n`cube.cheat()` *reverses all previous moves to return to starting (solved) state*\n\n**Turn a face**\n`cube.white.cw()`\nor\n`cube.turn('white', 'cw)`\nor\n`cube.turn('w')` *lowercase means clockwise, uppercase means counter-clockwise*\n\n**Solver**\n`solver = new Solver cube`"}
{"name":"DateValidator","readme":"DateValidator\n==============\n\nThe DateValidator project is to create a simple Date validator for both client-side and server-side JavaScript. At the moment, the goal is to keep things small and focus only on ensuring Day, Month, and Year are valid.  It is not intended to have the power of the node-dateutils project.\n\n## Installation ##\n\nComing Soon\n\n## Testing the Package ##\n\nOnce the package is installed, you can run the unit tests associated with the package also using NPM.\n\n    npm test DateValidator\n\n## Usage ##\n\nComing Soon"}
{"name":"Davis","readme":"# Davis.js\n\n## Description\n\nDavis.js is a small JavaScript library using HTML5 history.pushState that allows simple Sinatra style routing for your JavaScript apps.\n\n## Why\n\nUsing the history pustState and popstate events allows the links and forms in your app to have hrefs and actions that point to real end points on your server.  This allows complex JavaScript apps to degrade gracefully when JavaScript is unavailable and combining this with a template system that can be used both client and server side allows for large amounts of code reuse.\n\nDavis.js is heavily inspired by [Sammy.js](https://github.com/quirkey/sammy) (hence the name), it is however intentionally much lighter than Sammy.js because I never use any of the template rendering etc that it includes.  All Davis.js does is provide a simple routing layer, nothing more, nothing less.\n\n## Requirements\n\nDavis.js requires jQuery 1.4.2+ as well as a modern browser that supports HTML5 history.pushState and the onpopstate event.  At the moment that means FireFox 4+, Safari 5+, Chrome, iOS Safari 4+*, Android Browser 2.2+, Opera 11.50+.\n\nIn all other browsers Davis.js is currently unsupported, all links and forms will have their default behaviour.  You can bind to the 'unsupported' event on an app to handle this situation in your code.  Fallback to `location.hash` and `onhashchange` is a possibility in the future.\n\n*Whilst pushState is supported in iOS it has several, fairly serious bugs.  Davis will not fire the unsupported event though as _technically_ iOS does support davis.\n\n## Installation\n\nDownload davis.min.js and include it on your page after jquery.\n\n## Example\n\nA very simple example of a Davis.js app:\n\n    var app = Davis(function () {\n      this.get('/welcome/:name', function (req) {\n        $('body').append('<h1>Hello there, ' + req.params['name'] + '!</h1>')\n      })\n    })\n    \n    $(document).ready(function () {\n      // append a link to trigger the route\n      $('body').append('<a href=\"/welcome/bob\">Greet</a>');\n      \n      app.start();\n    })\n\nWe create a new instance of a Davis.App using the Davis.js function, passing in a function that will draw the routes for the application.  Inside this function `this` is the instance of our application.\n\nWe define a simple get route with a 'name' parameter and a callback that will append a message to the html body.  Inside the route callback `this` is set to the request that matches the route, this request is also passed as a parameter to the callback.\n\nOnce the app is configure it needs to be started.  You start a Davis.js app by calling the `start` method, this must be done once the document is ready.  Now if you click on the link that we appended to the body our route should be called and a friendly greeting printed on the page.\n\nTo use Davis your html file must be loaded from a server rather than just opening the file in your browser.\n\n## More\n\n[API docs](http://olivernn.github.com/davis.js/docs)\n\n[Example](http://davis-example.heroku.com/notes) using davis.js and a mustache templates shared between the client and the server, [code](http://github.com/olivernn/notepad)\n\n## Contributing\n\nContributions are more than welcome, to make the process easier and quicker please follow these guidelines:\n\n* Open an issue detailing the bug fix or feature in your patch.\n* Add test cases for your code.\n* Don't change the version or build new versions as part of you patch.\n\n## Running examples\n\n  First you'll need [node](http://nodejs.org) installed for the server. Then execute the following command and visit one of the examples: `http://localhost:3000/examples/todo.html`.\n  \n    $ make test\n\n## Feedback\n\nAny feedback or suggestions are welcome via [issues](https://github.com/olivernn/davis.js/issues)."}
{"name":"Deci-mal","readme":"Decimal\n=======\n\nSimple Decimal type for Javascript.\n\nSimple Decimal type which allows for:\n\n* conversion from numbers;\n* conversion from strings;\n* specification of precision;\n* changing of precision;\n* addition of Decimals;\n* subtraction of Decimals;\n* multiplication of Decimals;\n* division of Decimals.\n\nWhen doing add, sub, mult, div-operators with two Decimals, the result will have the precision of the source Decimal with the highest precision.\n\nJsDecimal uses an integer for internal storage.\n\nJsDecimal is released under the Simplified BSD License.\n\nExample usage\n=============\n```js\nvar decimal = require('decimal');\n\n// conversion from numbers\nvar a = decimal.fromNumber(2, 20); // 20.00\nvar b = decimal.fromNumber(4, 40.1); // 40.1000\n\n// conversion from strings\nvar c = Decimal.fromString(2, '60.60001'); // 60.00\n\n// specification of precision\nvar d = new Decimal(1); // 0.0\n\n// changing of precision\nb.newPrecision(2).toString(); // 40.10\n\n// addition\na.add(b).toString(); // 60.1000\n\n// subtraction\na.sub(b).toString(); // -20.1000\n\n// multiplication\na.mul(b).toString(); // 802.0000\n\n// division\na.div(b).toString(); // 0.4988\n```\n\nUnit testing\n============\nUnit tests are built using Expresso.\n"}
{"name":"DelegateListener","readme":"# DelegateListener\n\n## Dependencies\n`Element.prototype.matchesSelector` shim.\nIt coudth be found in https://gist.github.com/2369850\n\n## Example\n\n```javascript\n//Filtering by class\ndocument.addEventListener(\"click\", new DelegateListener(\".player\", callback))\n//Filtering by attribute value\ndocument.addEventListener(\"click\", DelegateListener({\"data-event\" : \"click\"}, callback))\n//Filtering by attribute exists\ndocument.addEventListener(\"click\", DelegateListener({\"data-is-menu\" : void 0}, callback))\n//Filtering by custom filter\ndocument.addEventListener(\"click\", DelegateListener(\n\tfunction(node) {\n    \treturn node.contains(someOtherNode);\n    },\n\tcallback)\n)\n\n//Using filter instead of callback\nvar editorController = {\n\tcopy : function() {},\n\tpaste : function() {},\n\thandler : function(node) {\n        var operation = node.getAttrubute(\"data-menu-event\"),//\"copy\" or \"paste\" or null\n            function = operation && this[operation];\n\n        if(function) {\n            function.call(this, node);\n            return true;\n        }\n    }\n}\n\ndocument.addEventListener(\"click\", DelegateListener(\n\teditorController.handler.bind(editorController),\n    function(){return false}\n));\n```\n\n## Licence\nMIT"}
{"name":"DirWatcher","readme":"##DirWatcher 监视你的目录\n\n监控指定目录中文件的增加，删除，修改，子目录的增加，删除等\n\n安装 `npm install DirWatcher`\n\n### USAGE 使用\n\n\tvar dw = require( './DirWatcher' );\n\tdw.watchDir( 'path', function( ifDir, path, cur, pre ){\n\t\t\n\t\t// ifDir 是否为目录\n\t\t// path 文件或者目录的路径\n\t\t// type 变更类型 'modify' 'remove' 'add'\n\t\t// cur 当文件变更时，包含当前文件的信息\n\t\t// pre 当文件变更时，包含变更前文件信息\t\n\t});\n\t\n###API\n\n####watchDir( path, next )\n\n* `path`: 目录的路径\n* `next`: 回调，包含五个个参数`ifDir`, `path`, `type`, `cur`, `pre`\n\n####readDir( path, next )\n\n对制定目录进行递归便利，对每一个有效路径执行一次回调\n\n* `path`: 目录的路径\n* `next`: 回调，为目录下的每一个文件或者子目录执行一次回调。回调包含\n* * err\n* * path: 路径\n* * ifDir: 是否为目录\n\n###Exception 配置例外\n\n可以通过在需要添加例外的目录下添加名为`.nowatch`文件，来添加例外. 例外添加的规则：\n\n* 每一行为一条例外\n* 一行中若出现空格，空格后的内容将被忽略\n* 使用`#`进行注释\n* 以`/`结尾的例外将被视为目录，否则为具体的文件名\n\n###存在的问题\n\n* 当watch的文件和目录过多，将报错`EMFILE`的错误\n* 当一个路径被删除，然后再新建同名路径时将无法重新`watch`该路径（对于目录应该问题不大，但是对于文件，暂时无法解决）\nhah"}
{"name":"Domai.nr","readme":"The Domai.nr module is a dead-simple way to utilize Domai.nr's [JSON API](http://domai.nr/api/docs/json). It only comes with two methods: `search` and `info`, but that's all we need to get a ton of work done with the data behind Domai.nr.\n\n## Examples\n\n\n##### Express\n\nI prefer making my express apps driven by an internal API. By that, I mean I like to set up back-end routes that my front-end routes can receive data from. Included in the `/example` directory is a very rudimentary example of how one would go about using the doaminr module.\n\n\n## Installation\n\n\t$ npm install domainr\n\n\n## Documentation\n\nLike previously mentioned, this module comes with two methods available: `search`, and `info`. Both of them take two arguments: a **query** and a **callback** (which aliases the parameter you pass into it as the data that's returned from Domai.nr, so you can do whatever you want with it).\n\n##### .search(query, callback)\n\n\n##### .info(query, callback)"}
{"name":"DynamicBuffer","readme":"# DynamicBuffer, a wrapper around node.js Buffer class\n\nThe Buffer class of node.js by default cannot be used as buffer to concatenate strings, like StringBuilder known from java [http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html].\nThis module contains a wrapper around node.js Buffer to concatenate strings into a Buffer, while automatically creating larger Buffers in the background, if more space is needed.\n\n    /**\n     * constructor, takes a starting size for the underlying buffer\n     * and a factor, in which the buffer grows, if it gets to small.\n     * Both have defaults (512 and 2.0).\n     */\n    var DynamicBuffer = module.exports = function(_size, _factor)\n\n    /**\n     * append a string to the buffer and return it for chaining\n     */\n    DynamicBuffer.prototype.append = function(_string)\n\n    /**\n     * append a byte to the buffer and return it for chaining\n     */\n    DynamicBuffer.prototype.write = function(_byte)\n\n    /**\n     * append a javascript (V8) buffer or DynamicBuffer to this one\n     * and return it for chaining\n     */\n    DynamicBuffer.prototype.concat = function(_buffer)\n\n    /**\n     * get a copy of this DynamicBuffer. Changing one of the buffers does\n     * not change the other one. Will accept an optional size for the copy.\n     * If not given, the new one will be exactly the same as the original.\n     */\n    DynamicBuffer.prototype.clone = function(_newBufferSize, _newResizeFactor)\n\n    /**\n     * shrinks this buffer either to the given size, or the length of the current buffer.\n     * This method is mainly used to squeeze out the last bytes of memory, or increase the\n     * size for large chunks of data to come\n     */\n    DynamicBuffer.prototype.resizeUnderlyingBuffer = function(_size)\n\n    /**\n     * return a view of the underlying buffer that only contains the written space.\n     * Changing that view will change this buffer, too.\n     */\n    DynamicBuffer.prototype.getBuffer = function()"}
{"name":"ETag","readme":"Bienvenue dans le module ETag pour node.js \n\nThis module computes ETag sum  for locals files\n\nIt uses a array like a cache \n\nCe module permet de gérer les headers ETag d'une ressource web\n\n# Usage\n\nFirst : var ETag = require('ETag');\n\nThen use it: \n \nLike a function : \n          etag = ETag.Calcul({'ressource':'zombi.jpg', 'url':'/zombi.jpg'}) ;\n          console.log(\"etag:\" + etag);  \n\n\nor OOP \n\n        myetag = new ETag({\n         'url': '/foo/bar.png',\n         'etag': '1234567890'\n        });\n\n# Installation \n## by npm \n\nnpm install ETag\n\n## From github \n\nGo to https://github.com/germanlinux/ETag and download the archive\n\n## by git \n\ngit://github.com/germanlinux/ETag.git\n\n\n# Prerequis\n\nnode.js\n\nnpm\n\ncoffeescript (uniquement pour modifier les sources coffeescript)\n\n## Dépendances\n\naucunes\n\n# Methods\n\n##Constructor: \n\n        myetag = new ETag({\n         'url': '/foo/bar.png',\n         'etag': '1234567890'\n         'resource' :'path_to/bar.png'\n        });\n\nIf you give 'resource' ,  ETag will be re-comptuting\n\nEach call of 'new' , pushes the url and l'ETag in the cache.\n \n## Attribute\n\nmyobjet.value :return ETag value \n \n##CLass method\n\nETag.Calcul(resource) \n\n        eg: myetag = Etag.Calcul({'resource':'/path/img.png'});\n\nETag.Calcul_etag(file)\n\n        eg: myetag = Etag.Calcul_etag({'/path/img.png');\n\nETag.Find(by_url)\n\nETag.Raz() : clear the cache\n\nETag.List() : list all entries from cache\n\nETag.Items() : return the number of entries\n\n\n# Tests \nnpm test ETag\n\n\n"}
{"name":"Frog","readme":"What's Frog?\r\n==\r\nFrog is a NodeJS module that enables Google Dart support. You may now write server-side Dart enabled NodeJS applications.\r\n\r\n## How to install\r\nIt's not yet released, but when it is:\r\n\r\n```\r\nnpm install Frog\r\n```\r\n\r\nFor now, clone the repo.\r\n\r\nYou also need to have Dart SDK installed: http://www.dartlang.org/docs/getting-started/sdk/#download\r\n\r\nMake sure the installation bin folder is in your environment ```$PATH```.\r\n\r\n## Examples\r\n\r\n#####app.js\r\n```javascript\r\n// Include the Frog compiler.\r\nrequire('./../lib/Frog.js');\r\n\r\n// Now just run Dart like a boss.\r\nconsole.log('I am about to run some Dart...');\r\n\r\nrequire('./test.dart');\r\n\r\nconsole.log('I just ran Dart!');\r\n```\r\n#####test.dart\r\n```dart\r\nclass Point {\r\n  Point(this.x, this.y);\r\n\r\n  distanceTo(Point other) {\r\n    var dx = x - other.x;\r\n    var dy = y - other.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  var x, y;\r\n}\r\n\r\nmain() {\r\n  Point p = new Point(2, 3);\r\n  Point q = new Point(3, 4);\r\n\r\n  print('distance from p to q = ${p.distanceTo(q)}');\r\n}\r\n```\r\n\r\n#####Run it\r\n```\r\n$ node app.js\r\nI am about to run some Dart...\r\ndistance from p to q = 1.4142135623730951\r\nI just ran Dart!\r\n```\r\n\r\n## Status\r\n\r\nThis project is not yet production ready! It's also quite slow. I'm planning to take another approach to this."}
{"name":"GitAzure","readme":"# GitAzure #\n\nGithub hook for node.js apps hosted in Microsoft Azure.\n\n## Creating a node.js application from scratch, hosted in Azure, sourcecontrolled by Github. ##\n\nThis documentation is currently aimed at those with some prior Azure knowledge. That will change.\n\nStep by step creating an application:\n\n  1. Unless you already have git for Windows, install msysgit from http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.8-preview20111206.exe&can=2&q=\n  2. Install node.js from http://nodejs.org\n  3. `npm install -g https://github.com/einaros/GitAzure/tarball/master`\n  4. `New-AzureService servicename`\n  5. `Add-AzureNodeWebRole`\n  6. `cd WebRole1`\n  7. `Enable-AzureRemoteDesktop`\n  8. `gitazure.cmd`; follow the instructions.\n  9. As noted, put a valid Github id_rsa and id_rsa.pub keypair in WebRole1\\bin\\.ssh, e.g. by copying pre-existing from $env:USERPROFILE\\\\.ssh\n  10. In git bash within the WebRole1 folder, do `git commit -am 'initial'` then `git push -u origin master`\n  11. `Publish-AzureService`; this will take roughly 10 minutes.\n  12. Add http://yoursite.cloudapp.com/githook to the service hooks of your github repository.\n\nAt this point you should be able to make changes to the code in the repository, and publish updates to your Azure application by pushing to Github. That includes writing code on other platforms than Windows.\n\nGitAzure also supports installing npm modules, and will execute `npm install` on the server whenever changes to package.json are detected.\n\nSome settings are available within your web role's gitazure.json config file, which among other things allows you to restrict application updates to a specific branch (e.g. 'azure').\n\nMore to come."}
{"name":"Google_Plus_Server_Library","readme":"Detailed instructions coming in the near future.\n\nIn the meantime, this server side library is meant to use similar syntax as the Google JavaScript Client Library for Google+ (more info at http://googlecode.blogspot.com/2011/11/javascript-client-library-for-google.html)\n\nBasic usage can be viewed in Examples/test.js"}
{"name":"Gps2zip","readme":"\n# Gps2zip\n\nConvert GPS latitude longitude pairs to a US zip code.\n\nRuns as a server-side node API for your client-side js applications. \n\n# Example usage\n\nCommand line:\n\t\n\tburt$ curl \"localhost:4000?lat=30.2859283&lon=-97.7461031\"\n\t{\n\t\t\"zip code\":\"78705\",\n\t\t\"state abbreviation\":\"TX\",\n\t\t\"latitude\":\" 30.292424\",\n\t\t\"longitude\":\" -97.73856\",\n\t\t\"city\":\"Austin\",\n\t\t\"state\":\"Texas\",\n\t\t\"distance\":0.009954520385227613\n\t}\n\nFrom jQuery:\n\n\tvar lat = 30.2859283;\n\tvar lon = -97.7461031;\n\t$.get(\"/?lat=\" + lat + \"&lon=\" + lon, function(res){\n\t\tconsole.log(res);\n\t\tif(res.error != undefined){\n\t\t\tconsole.log(res.error);\n\t\t} else {\n\t\t\tconsole.log(res[\"zip code\"]);\n\t\t}\n\t});\n\n\nSee /demo for an example using jQuery in the browser.\n\n# Quick Start\n\n\tnpm install gps2zip\n\tnpm install -d\n\tnode server.js\n\n# Accuracy\nThe output is approximate. The source data is just a list of coordinates, not actual boundaries. The algorithm just finds the minimum euclidean distance between the point in question and the known points. No error checking for points outside the United States.\n\n# Related\n\nYou can get full street addresses using the Google Maps Reverse Geocoding API:\nhttp://code.google.com/apis/maps/documentation/javascript/geocoding.html#ReverseGeocoding\n\n# Credit\n\nZip codes from The Zip Code Database Project\nhttp://sourceforge.net/projects/zips/\n\n# License\n\nAll other work is [The Unlicense](http://unlicense.org/) (Public Domain)\n\n"}
{"name":"HTTPRequest","readme":"#HTTPRequest v0.0.1#\n\nA simple yet powerful HTTP request library inspired by jQuery and LSL written in Javascript for clientside and Serverside(Node.js) Javascript. Major thanks to [node-XMLHttpRequest](https://github.com/driverdan/node-XMLHttpRequest) for giving us a XMLHttpRequest Object, that really helps make this both client/server.\n\n## Setup##\n\nTo set up HTTPRequest on your Node.js server use npm(case sensitive package name).\n\n\tnpm install HTTPRequest\n\nIf you want to use HTTPRequest on the client-side (browser), just include HTTPRequest.js into your page.\n\n\t<script type='text/javascript' src='HTTPRequest.js'></script>\n\n##Example##\nFirst, you have to do is require the HTTPRequest module (if you're using it client-side, this isn't necessary).\n\n\tvar HTTPRequest = require('HTTPRequest');\n\n```\nHTTPRequest.get('get_test.php', function(status, headers, content)\n{\n\tconsole.log(status, headers, content);\n});\n```\n\n##request##\n`request(url, parameters, callback)`\nA lower level function, but I hope you never really need to use it as `post`, `get` is a wrapper around it.\n\n##post##\n\n`post(url, data, callback, options)`\n\nA url, data(object, can be empty also `{}`), callback are required.\noptions is not required, but it can be a object.\n\n##get##\n`get(url, callback, options)`\nurl and callback are required. \n\noptions is not required, but it can be a object.\n\n##delete##\n`del(url, callback, options)`\n\nsame as get\n\n##put##\n`put(url, data, callback, options)`\n\nsame as post\n\n##encode##\n`encode(url)`\n\ntakes a url and escapes it, then returns it.\n\n##decode##\n`encode(url)`\n\ntakes a decodeed url and Unencode's it, then returns it.\n\n\n##options##\n\n*option names are NOT case sensitive.\n\n* `USERAGENT` - string - Write your own [user agent](http://en.wikipedia.org/wiki/User_agent), default is `node.js`. Setting this ONLY works on the server.\n* `QUERY` - `string` or `object` - appends to the end of the `url`.\n* `DATA` - `'POST'` or `'PUT'` data `string` or `object`\n\n##parameters##\nEverything as options, but also:\n\n`METHOD` - string - `'GET'`, `'POST'`, `'PUT'` and `'DELETE'`, default is `'GET'`\n\n##callback##\n\n`status, headers, content`\n\n* `status` - is HTTP code (like 404 or 200)\n* `headers` - is a object with the respone headers\n* `content` - The metadata `"}
{"name":"IIF","readme":"# What is this?\r\nWell, i've gotten mighty tired of the conventional programming patterns, and i stumbled upon a very intrested ideea in [Alex McCaw's book](http://alexmccaw.com/) about Web Applications, and decided to walk on that path.\r\n\r\n## What's the catch?\r\nWith every object that inherits the model, you get to construct its controller at the same time, from the same object. I'll show you...\r\n\r\nHere is how you would create a Users model :\r\n\r\n```coffeescript\r\nclass User extends require(\"Model\") \t\t\t// using CommonJS here to get the module\r\n\t@extend require(\"EventHandler\")\t\t\t\t// Mixin the EventHandler into the controller\r\n\t@include require(\"EventHandler\")\t\t\t// Mixin the EventHandler into the model\r\n\t/* These methods belong *controller* part of the object */\r\n\t@getAllUsers: (data) ->\t\t\t\t\t\t// fetches data from the server, let`s say, as a callback to a socket.io event\r\n\t@removeAllUsers: () -> \t\t\t\t\t\t// removes all of the users stored on the client side\r\n\t@fetchUsersFromLocalStorage: () -> \t\t\t// recover users saved in the HTML5 LocalStorage\r\n\t/* And now, these methods belong to the individual instances of the object, the *model* */\r\n\tinit: (json) -> \t\t\t\t\t\t\t// Do something with the data \r\n\tsetName: (string) -> \t\t\t\t\t\t// Set the name of the individual user\r\n\t/* And so forth */\r\n```\r\n\r\nOh and, here is how your getAllUsers:\r\n\r\n```coffeescript\r\n\t...\r\n\t/* Let`s suppose the data is transfered using jsons in the form of *id*: _userdata_ */\r\n\t@getAlLUsers: (data) ->\r\n\t\t@create(userdata, id) for id, userdata of data \r\n\t\t\t// the *@create* method creates a new model, and calls the init method of the model created\r\n\t...\r\n```\r\n\r\nBecause we extended the controller with _EventHandler_ object, we can now create a new event to handle the user data.\r\n\r\n```coffeescript\r\n...\r\nrequire(\"EventHandler\") \t\t\t\t\t\t// Making sure the EventHandler is registered\r\nEventHandler.subscribe \"getAllUserData\", User.getAllUsers\r\nIO = socket.io.connect(\"some_address\")\t\t\t// Connecting to a WebSocket\r\nIO.on \"getAllUserData\", (err, json) ->\t\t\t// Handling the event\r\n\tif err then trigger err\t\t\t\t\t\t// Taking care of the errors\r\n\tEventHandler.publish \"getAllUSerData\", json // Triggering the event\r\n...\r\n```\r\n\r\nStarting from this, we can use the event substructure to make the @removeAllUsers easier :\r\n\r\n```coffeescript\r\n\t...\r\n\tsubscribe \"removeAllObjects\", @remove \t\t// Subscribe each model to the removeAllObjects event\r\n\t...\r\n\t@removeAllUsers() -> \r\n\t\t@publish \"removeAllObjects\"\t\t\t\t// Trigger the removeAllObjects event\r\n\t...\r\n```\r\n\r\nWhen the removeAllObjects event is triggered on the user controller, all of the users will react to it, removing themselves automatically.\r\n\r\nYou see, between controllers and events, there is nothing easier than programming in CoffeeScript :)\r\n\r\nAnyways, currently only a StateMachine is implemented to demonstrate the EventHandler and the Model classes.\r\n\r\n## Have fun :)\r\n"}
{"name":"IO","readme":"\nIO\n==\n\n\tRapid Testing of available/unavailable .IO TLDs w/ WordLists & REST API"}
{"name":"JASON","readme":"## JASON\n\nJASON is just like JSON, but unlike JSON it can:\n\n* serialize objects with methods\n* serialize objects with cyclic references\n* understand Dates, Regexps, Booleans, etc, and restore them with `.parse()` with their proper types/classes.\n* understand and serialize all the JS primitives, including `undefined`\n* properly recreate the holes in Arrays\n\nJASON lets you pass objects as text between processes and/or threads.\n\nWarning: unlike JSON, JASON is *unsafe*. You should only use it in contexts where you have strong guarantees that the strings that you pass to the JASON parser have been produced by a JASON formatter from a trusted source.\n\n## Syntax\n\nJASON syntax is just plain JavaScript (but not JSON). \n\nThe `stringify` function does the clever work of generating whatever Javascript is needed to recreate the object, and the `parse` function is just a call to `eval`.\n\n## Examples\n\nSee the `test/test01.js` file.\n\n## API\n\n``` javascript\nvar JASON = require(\"JASON\");\n\nstr = JASON.stringify(obj);\nobj = JASON.parse(str);\n```\n\n# Installation\n\nThe easiest way to install `JASON` is with NPM:\n\n```sh\nnpm install JASON\n```\n\n## License\n\nThis work is licensed under the [MIT license](http://en.wikipedia.org/wiki/MIT_License).\n"}
{"name":"JPath","readme":"\nJPath is a tool for riding through json using an XPath syntax.\n\nNode.js complient\n\nTravis CI tracker: http://travis-ci.org/#!/j-san/JPath\n\n[![Build Status](https://secure.travis-ci.org/j-san/JPath.png?branch=master)](http://travis-ci.org/j-san/JPath)\n\nusage\n-----\n\n    var d = new JPath(data)\nCreate a new examinable data set. JPath extends Array,\nget free to use Array functions on JPath like push or slice.\n\n    d.q(path, function) or JPath.query([path][, function])\nReturn a subset of JPath, if callback is specified, callback \nis called for each matching elements.\n\n    d.count([path])\nReturn the number of matching elements by path.\n \n    d.sum([path])\nReturn the sum of matched values.\n\n    d.exists([path])\nReturn true if any element match the path.\n\n    d.valueOf([path])\nReturn each literal values of the set.\n\n    d.copyOf([path])\nReturn a string representation of the set.\n \n \nSupported XPath syntax\n----------------------\n    path/to/somewhere\n    path//deep//inside/and/*/all/children\n    with[contains/path]/and/index[123]/selection\n    computing[(1+2)*123=5]\n    /any[combining]/of//different/*[0]/syntax\n\t..."}
{"name":"JQ","readme":"# JQ [![Build Status](https://secure.travis-ci.org/arumons/JQ.png?branch=master)](http://travis-ci.org/arumons/JQ)\n\nJQ is a DSL for querying javascript object. APIs are very similar to jQuery. If you know jQuery, you can use this library immediately.\n\n## Instalation\n\nvia npm:\n\n```bash\n$ npm install JQ\n```\n\n## Browser Support\n\nTo compile JQ to a single file runnable for client-side use simply execute:\n\n```bash\n$ make JQ.js\n```\n\n## Sample\n\n```bash\nvar JQ = require('JQ').JQ;\n\nvar family = {\n  father_name: 'bob',\n  mother_name: 'kathy',\n  children: [\n    { \n      name: 'john',\n      age: 3\n    },\n    {\n      name: 'alice',\n      age: 2\n    },\n    {\n      name: 'mike',\n      age: 1\n    }\n  ]\n};\n\nvar $family = JQ(family);\n$family(\"name === 'john' || age === 1\").get(0); // -> { name: 'john', age: 3 }\n$family(\"name === 'john' || age === 1\").get(1); // -> { name: 'make', age: 1 }\n\n```\n"}
{"name":"JSDev","readme":"JSDev, A JavaScript Development Tool\n\n\nDouglas Crockford\ndouglas@crockford.com\n\n2012-01-05\n\nJSDev is a filter that activates selected comments, making them executable.\nThis makes it possible to put development, performance, and testing scaffolding\ninto a source file. The scaffolding is removed by minification, but is activated\nby JSDev.\n\nJSDev is a filter that takes a source file and looks for tagged comments in\neither of these forms:\n\n    /*<tag> <stuff>*/\n\n    /*<tag>(<condition>) <stuff>*/\n\nThere can be no space between the /* and the <tag>. There can be no space\nbetween the <tag> and the (. The content of tagged comment may not include\ncomments, nor can it contain strings or regular expression literals that\ncontain */. So, write\n\n    /*debug(/[a-z][a-z0-9]*/.test(variable))\n        console.log(\"*/ test\");\n    */\n\nas\n\n    /*debug(/[a-z][a-z0-9]*(?:)/.test(variable))\n        console.log(\"*\\/ test\");\n    */\n\nJSDev is given a list the names of the tags that should be activated.\nAlso, methods can be defined by following the tag name with : and a method\nname. There can be no spaces around the :.\n\n    Replacement     /*<tag>         */\n\n    tag form        {               }\n    method form     {<method>(      );}\n\nIf a condition was included, then the replacement will be preceded with an\nif statement.\n\nThe implementation in C obtains the input from stdin, and provides the result\nto stdout. The tag list is taken from the command line. The command line can\nalso include a -comment specification. JSDev will exit(1) if there is an error.\n\nIn JavaScript, it is available as the JSDEV function that takes a source,\nan array of tags, and an optional array of comments. It will throw an\nexception if there is an error.\n\nC command line example:\n\n    jsdev -comment \"Devel Edition.\" <input >output test_expose enter:trace.enter exit:trace.exit unless:alert\n\nJavaScript:\n\n    output = JSDEV(input, [\n        \"test_expose\",\n        \"enter:trace.enter\",\n        \"exit:trace.exit\",\n        \"unless:alert\"\n    ] , [\"Devel Edition.\"]);\n\ninput:\n\n    // This is a sample file.\n\n    function Constructor(number) {\n        /*enter 'Constructor'*/\n        /*unless(typeof number !== 'number') 'number', \"Type error\"*/\n        function private_method() {\n            /*enter 'private_method'*/\n            /*exit 'private_method'*/\n        }\n        /*test_expose\n            this.private_method = private_method;\n        */\n        this.priv = function () {\n            /*enter 'priv'*/\n            private_method();\n            /*exit 'priv'*/\n        }\n        /*exit \"Constructor\"*/\n    }\n\noutput:\n\n    // Devel Edition.\n    // This is a sample file.\n\n    function Constructor(number) {\n        {trace.enter('Constructor');}\n        if (typeof number !== 'number') {alert('number', \"Type error\");}\n        function private_method() {\n            {trace.enter('private_method');}\n            {trace.exit('private_method');}\n        }\n        {\n            this.private_method = private_method;\n        }\n        this.priv = function () {\n            {trace.enter('priv');}\n            private_method();\n            {trace.exit('priv');}\n        }\n        {trace.exit(\"Constructor\");}\n    }\n\nlightly minified:\n\n    function Constructor(number) {\n        function private_method() {\n        }\n        this.priv = function () {\n            private_method();\n        }\n    }\n"}
{"name":"JSON2","readme":"\n# Overview\n\nThis module is a pure-JS implementation of the JSON interchange standard.\n\nIt has better support for lax JSON parsing (safe 'eval'), and for pretty printing JSON output.\n\n    var JSON2 = require('JSON2');\n    var jsondata = '{sample: \"data\", is: \"great\", data: [1, 2, 3, 4]}';\n    var obj = JSON2.parse(jsondata);\n    jsondata2 = JSON2.stringify(obj);\n    // {\"sample\":\"data\",\"is\":\"great\",\"data\":[1,2,3,4]}\n\nAlso useful, cycle breaking:\n\n    var data = {x: \"hello world\", y: [1, 2, 3, 4]};\n    data.self = data;\n    JSON2.stringify(JSON2.decycle(data));\n    // {\"x\":\"hello world\",\"y\":[1,2,3,4],\"self\":{\"$ref\":\"$\"}}\n\nAnd pretty printing:\n\n    JSON2.stringify(JSON2.decycle(obj), null, '  ');\n    // {\n    //   \"sample\": \"data\",\n    //   \"is\": \"great\",\n    //   \"data\": [\n    //     1,\n    //     2,\n    //     3,\n    //     4\n    //   ]\n    // }\n\n# Douglas Crawford's Original Overview (2010-11-18):\n\nJSON in JavaScript\n\nDouglas Crockford \ndouglas@crockford.com\n\nJSON is a light-weight, language independent, data interchange format.\nSee http://www.JSON.org/\n\nThe files in this collection implement JSON encoders/decoders in JavaScript.\n\nJSON became a built-in feature of JavaScript when the ECMAScript Programming\nLanguage Standard - Fifth Edition was adopted by the ECMA General Assembly\nin December 2009. Most of the files in this collection are for applications\nthat are expected to run in obsolete web browsers. For most purposes, json2.js\nis the best choice.\n\n\njson2.js: This file creates a JSON property in the global object, if there\nisn't already one, setting its value to an object containing a stringify\nmethod and a parse method. The parse method uses the eval method to do the\nparsing, guarding it with several regular expressions to defend against\naccidental code execution hazards. On current browsers, this file does nothing,\nprefering the built-in JSON object.\n\njson.js: This file does everything that json2.js does. It also adds a\ntoJSONString method and a parseJSON method to Object.prototype. Use of this\nfile is not recommended.\n\njson_parse.js: This file contains an alternative JSON parse function that\nuses recursive descent instead of eval.\n\njson_parse_state.js: This files contains an alternative JSON parse function that\nuses a state machine instead of eval.\n\ncycle.js: This file contains two functions, JSON.decycle and JSON.retrocycle,\nwhich make it possible to encode cyclical structures and dags in JSON, and to\nthen recover them. JSONPath is used to represent the links.\nhttp://GOESSNER.net/articles/JsonPath/\n"}
{"name":"JTmpl","readme":"\n[![Build Status](https://secure.travis-ci.org/j-san/JTmpl.png?branch=master)](http://travis-ci.org/j-san/JTmpl)\n\n[documentation](http://j-san.github.com//JTmpl)\n"}
{"name":"Katy","readme":"Katy: Coffeescript Combinators\n===\n\nKaty makes writing [fluent][fluent] Coffeescript easy by providing the `.K` and `.T` combinators for Coffeescript objects.\n\nThe **tl;dr** is that Katy adds two methods, `.K` and `.T` to any class or classes you desire:\n\n```coffeescript\nKT = require('Katy').KT\n\nKT.mixInto(String)\n\n# K calls a function on the receiver and returns the receiver\n\n'Hello'.K (s) -> s + ' World'\n  # => returns 'Hello'\n  \n# T calls a function on the receiver and returns the result\n\n'Hello'.K (s) -> s + ' World'\n  # => returns 'Hello World'\n```\n\nYou can also call any method by name:\n\n```coffeescript\nKT.mixInto(Array)\n\n[1..10]\n  .K('pop')\n  .K('pop')\n  .K('pop')\n  .T('pop')\n  # => returns 7\n```\n\n## How does that make my code more fluent?\n\nYou're familiar with [fluent interfaces][fluent]. They're great, but they rely on the author of the API making sure that each function returns its receiver. The `.K` method allows you to make any function or method \"fluent\" even if the original author has other ideas. The `.K` and `.T` methods also allow you to write your own methods and 'call' them just as if they were baked into the original object. For example, you can fake an `identifiers` filter for arrays of strings:\n\n[fluent]: http://en.wikipedia.org/wiki/Fluent_interface\n\n```coffeescript\nrequire 'underscore'\n\nidentifiers = (arrOfSymbols) ->\n  _.select arrOfSymbols, (str) ->\n    /^[_a-zA-Z]\\w*$/.test(str)\n  \nsomeArray\n  .T(identifiers)\n  .K('someMethodName')\n  .T(someOtherFilter)\n```\n\nThis is cleaner than trying to mix oridinary functions with methods and adopting tenporary variables when you want to work around what the function was written to return. In this example, having extended `Array.prototype` with `.K` and `.T` once, you need not extend it any more to add your own custom methods.\n\nTo recap:\n\n1. You can make any function into something that can be called like a method, making your code read more naturally, and;\n2. You can give any function or built-in method either \"fluent\" (return the receiver) or \"pipeline\" (return its value) semantics as you please.\n\n## Monkey-patching is evil!\n\nI agree. `KT(foo).K(...)` and `KT(foo).T(...)` work just fine without mixing `.K` and `.T` into an existing class, much as `_(...).tap` and other methods work without modifying an existing class. Also:\n\n```coffeescript\n\nKT([1..10])\n  .chain()\n  .K('pop')\n  .K('pop')\n  .K('pop')\n  .T('pop')\n  .value()\n  # => returns 7\n```\n\n## Stuff and nonsense, this is a syntax issue, not a functional issue\n\n[I agree][sans-titre], but that being said:\n\n1. You can use katy now instead of waiting to see if Coffeescript adopts a syntax for chaining methods, and;\n2. The `.K` and `.T` methods turn any function into something you can call like a method, which makes your code read more cleanly.\n\n[sans-titre]: https://github.com/raganwald/homoiconic/blob/master/2011/11/sans-titre.md \"Sans Titre\"\n  \n## Is Katy any good?\n\n[Yes][y].\n\n[y]: http://news.ycombinator.com/item?id=3067434\n\n[um]: https://github.com/raganwald/Underscore-Matchers-for-Jasmine\n\n## Cool! Does it work with jQuery?\n\nYes, but if you like jQuery and like Katy, you'll love [jQuery Combinators][jc].\n\n[jc]: https://github.com/raganwald/JQuery-Combinators\n\n## Calling a method by name is cool, but can you do more with Strings?\n\nTry `KT.installStringLambdas()`. The result is not to everybody's taste, but those who like it, like it a lot.\n\n## What's with the naming conventions?\n\n`.T` is known in some CS circles as the [Thrush][t] or `T` combinator. Likewise, `.K` is known in combinatory logic circles as the \"K Combinator\" or [Kestrel][k]. To simplify the explanation radically, `T` and `K` are called combinators because they combine things to produce a result in different ways. Functional programmers call such things higher-order functions, but what makes combinators interesting is that combinators work by rearranging the order of things in an expression.\n\nFor example, `T` reverses the order of two things. Think about it: Instead of writing `identifiers(some_array)`, we use `T` to write `some_array.T(identifiers)`. That rearrangement is very handy for making our code conform to fluent style. Likewise, `K` leaves them in the same order but removes something. This ability to rearrange things is what makes them so useful for taking code that would normally have function calls sprinkled throughout it and rearranging it into a nice tree of method calls in fluent style.\n\nMany other combinators exist, and they are all interesting with applications for functional and OO programmers. With combinators you can even get rid of parentheses in a programming language! If you aren't familiar with Combinatory Logic, I encourage you to follow the links to my posts about Kestrels and Thrushes, and better still do a little digging about Combinatory Logic in general. It's a rich, fascinating field of study that is so simple it's incredibly easy to pick up, and it leads naturally into functional and [concatenative][joy] languages.\n\n[k]: http://github.com/raganwald/homoiconic/blob/master/2008-10-29/kestrel.markdown#readme\n[t]: http://github.com/raganwald/homoiconic/blob/master/2008-10-30/thrush.markdown#readme\n[joy]: http://github.com/raganwald/homoiconic/blob/master/2008-11-16/joy.md#readme"}
{"name":"LISP.js","readme":"LISP.js\n=======\n\nParse and execute LISP code in JavaScript.\n\nAPI\n---\n\nFor parsing the code, the `parse` function can be used.\nThis will return an array with all pieces.\n\n``` js\nparse('(+ 2 3)'); // ['+', 2, 3]\n```\n\nExecuting code can be done with the `exec` function:\n\n``` js\nexec('(+ 3 (- 10 5))'); // 8\n```\n\nAMD\n---\n\nLISP.js uses the [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) format. You could use any compatible AMD loader, either on Node.js or in the browser to use this Complex module. I'd recommend [Require.JS](http://requirejs.org/).\n\nConcatenating AMD modules can be done with _r.js_ or [amd-packager-php](https://github.com/arian/amd-packager-php)\n\nLISP.js in Node.js\n------------------\n\nFor usage in node.js, [amd-loader](https://github.com/ajaxorg/node-amd-loader)\nis required. This can be installed by running `npm install`.\n\nThen `amd-loader` should be required in your own file:\n\n```js\nrequire('amd-loader');\nvar exec = require('LISP.js/exec');\nexec('(+ 1 2)');\n```\n"}
{"name":"LiveController","readme":"Live Controller v0.0.1\n======================\n\nTable of Contents\n-----------------\n  * [Introduction](#introduction)\n  * [API docs](#api)\n  * [Experimental API docs](#experimental)\n  * [Examples](#examples)\n  * [Tests](#tests)\n  * [Contributing](#contributing)\n  * [Contributors](#contributors)\n  * [License](#license)\n\n<a name=\"introduction\"></a>\n\nIntroduction\n------------\n\nLive Controller is a tiny, client-side router that uses window.pushState and falls back to regular page refreshes when pushState is not available.\n\n<a name=\"api\"></a>\n\nAPI docs\n--------\n\nYou can find the API docs in the docs folder.\n\n<a name=\"experimental\"></a>\n\nExperimental API docs\n---------------------\n\nExpelrimental API docs will be made available when any part of the project isn't experimental.\n\n<a name=\"examples\"></a>\n\nExamples\n--------\n\n###Here's an example\n\n  var controller = new Controller(\"/things\", function(thing) {\n\n    thing.get(function(params) {\n\n    }) \n\n    thing.get(\"/:id\", function(params) {\n\n    }) \n\n    thing.delete(\"/:id\", function(params) {\n\n    })\n\n    thing.put(\"/:id\", function(params) {\n\n    })\n\n    thing.post(function(params) {\n\n    })\n\n  }) \n\n###And here's how you send invoke them\n\n  Controller.get(\"/things\")\n\n  Controller.get(\"/things/12\")\n\n  Controller.delete(\"/things/42\")\n\n  Controller.put(\"/things/42\", {\"title: \"w00t\"})\n\n  Controller.post(\"/things\", {\"title: \"w00t\"})\n\nContributing\n------------\n\nIdeas, feature requests, bug reports, etc are very welcome.\n\n### TODO before releasing this,\n  * Can we use something better by someone else?\n  * Get rid of http verbs, they dumb\n  * fallback for shitty browsers with #!\n\n<a name=\"contributors\"></a>\n\nContributors\n------------\n\n  * Zach Smith @xcoderzach\n  * Eugene Butler @EButlerIV\n\n<a name = \"license\"></a>\n \nLicense\n-------\n\nMIT Licensed (see LICENSE.txt)\n"}
{"name":"LiveDocument","readme":"LiveDocument v0.0.0\n===================\n\n  LiveDocument is an client/server isopmorphic ODM.  The goal of LiveDocument\nis to provide a seamless way to interact with a mongodb database on the client,\nwithout duplication of effort writing both a client side and a server side\nmodels. \n\n  LiveDocument also provides real-time updates out of the box.  After you query\nsomething from the database, LiveDocument notifies you of any documents that\nare created, updated, or deleted and match your criteria.  If you ask for a\nsingle document, any changes made to that document will automatically be pushed\nto you.\n\n\nTable of Contents\n-----------------\n  * [Example](#example)\n  * [Motivation](#motivation)\n  * [API docs](#api)\n  * [Experimental API docs](#experimental)\n  * [Tests](#tests)\n  * [Contributing](#contributing)\n  * [Contributors](#contributors)\n  * [License](#license)\n\n\n<a name = \"example\"></a>\nExamples\n--------\n\nHere is a random assortment of code in coffeescript:\n\n```coffeescript\nclass Task extends LiveDocument\n  @key \"title\", { length: [3...24] }\n  @key \"description\", { max: 140 }\n\ntask = new Task({title: \"Work that needs to be done\", description: \"This is some important work\", priority:10})\ntask.save()\n\n# or \n\nTask.create({title: \"Clean carpet\", description: \"Clean the carpets, they're gross\", priority: 4})\n\ntask = Task.findOne({title: \"This is my title\"})\n\ntask.on \"load\", (tasks) ->\n  console.log(task.get(\"priority\")) # 10\n\ntask.on \"update\", (task) ->\n  #called when someone updates this task\n\ntask.on \"delete\", (task) ->\n  #called when someone deletes this task\n\n#this runs any time priority changes\ntask.get \"priority\" (val) ->\n  console.log(val) # 10\n\ntask.get \"priority\" (key, val) ->\n  console.log(key) # priority\n  console.log(val) # 10\n# this binds tasks get to views set binding\ntask.get \"priority\", view.set\n# this binds all properties\ntask.get view.set\n\ntask.set \"key\", value\ntask.set {key: value, key2: val2}\n\n# mongodb style queries, if it\"s supported by mongo, we should support it (not\n# true atm!)\n\ntasks = Task.find({priority: {$lt: 10}})\n\ntasks.on \"load\", (tasks) ->\n  # called when the tasks have been loaded from the datasource\n\ntasks.on \"insert\", (tasks) ->\n  # called when a document is created that matches the criteria\n  # or an existing document is updated in such a way that it\n  # now matches the criteria\n\ntasks.on \"remove\", (tasks) ->\n  # called when a document is deleted that matches the criteria\n  # or an document is updated in such a way that it no longer\n  # matches the criteria\n```\n \n<a name = \"motivation\"></a>\nMotivation\n----------\n\n<a name = \"api\"></a>\nAPI \n---\n\nYou can find the API here: \nxcoderzach.github.com/liveDocument\n\n<a name = \"experimental\"></a>\nExperimental API (Warning, these method probably DON'T EXIST OR WORK\n----------------\n\n### .allowScope()\n\n  Since we don't want a malicious user to be able to query every\npost on our social network.  Which would essentially be a DoS attack,\nsince it would grab EVERY post and authorize them ALL.  That's where\nallowScope comes in handy.  \n\n  The allowScope method won't allow any queries which don't have they keys defined\nin allowScope. \n\n```coffeescript\nclass Post extends LiveDocument\n  @requireScope = true\n  @allowScope { ownerId: } \n\n```\n\n\n<a name = \"tests\"></a>\nTests \n-----\n  To run the tests you need an instance of mongo running on the default port.\nThen just run the following.\n\n    mocha test/*.coffee\n\nValidation\n----------\n\n  Model validation happens on both the client and the server when possible.\nInput is validated on the client first if possible, to provide a responsive\nuser experience.  The model is then validated again on the server, in order to\ncatch people bypassing client side validation, as well as doing validations\nthat can only happen on the server, such as checking if an email address is\ntaken.\n\n####Error Messages\n\n  Validations do not give you error messages.  They do not allow you to set\nerror messages.  Error messages belong in the view.\n\n  All of the declarative LiveDocument class methods, return this, allowing you\nto chain them together.\n\n<a name = \"contributing\"></a>\nContributing\n------------\n  \n  Ideas, feature requests, bug reports, etc are very welcome.\n\n####TODO Before it's releaseable\n  * make it able to run by itself, as a connect middleware\n  * has many associations should be embedded documents or\n  normal assocs\n  * get rid of coffeescript tests\n  * documentation\n\n<a name = \"contributors\"></a>\nContributors\n------------\n\n  * Zach Smith @xcoderzach\n  * Eugene Butler @EButlerIV\n  * Chad Seibert @omegakoder\n\n<a name = \"license\"></a>\nLicense\n-------\n\n  Licensed under MIT (see LICENSE file)\n"}
{"name":"MQTTClient","readme":"# MQTTClient for Node.js\n\n\nTo start before, you need to know something about MQTT, please see\n[MQTT V3.1 Protocol Specification](http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html)\n\n在使用本模块之前，你需要了解一些MQTT协议的知识，可参阅：[MQTT V3.1 协议规范](http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html)\n\n\nInstall 安装\n=================\n\n**npm install MQTTClient**\n\n\nExamples 示例\n=================\n\n```javascript\n\n\tvar MQTTClient = require('MQTTClient').Client;\n\t\n\t// if you don't assigned a client_id, will automatically assigns one\n\t// 如果没有指定client_id，则程序会自动分配一个\n\tvar options = {\n\t\tclient_id:\t'you_client_id'\n\t}\n\tvar client = new MQTTClient('localhost', 1883, options);\n\t\n\tclient.connect(function () {\n\t\t// do something if connect success\n\t\t// 在此处写连接成功后执行的代码\n\t});\n```\n\n\t\nSubscribe & Un Subscribe 订阅和退订\n=================\n\n```javascript\n\n\t// subscribe to a topic\n\t// 订阅一个主题\n\tvar options = {\n\t\tdup_flag:\t0,\n\t\tqos_level:\t0\n\t}\n\tclient.subscribe('topic_name', options, function (topic, qos_level) {\n\t\t// do something if success\n\t\t// 在此处写订阅成功后执行的代码\n\t});\n\t// Simplified:\tclient.subscribe('topic_name');\n\t// 也可以这样：\tclient.subscribe('主题');\n\t\n\t// un subscribe a topic\n\t// 退订一个主题\n\tclient.unSubscribe('topic_name', options, function (topic) {\n\t\t// do something if success\n\t\t// 在此处写退订成功后执行的代码\n\t});\n\t// Simplified:\tclient.unSubscribe('topic_name');\n\t// 也可以这样：\tclient.unSubscribe('主题');\n```\n\t\n\nPublish 发布\n=================\n\n```javascript\n\n\t// publish message to a topic\n\t// 发布一个消息到指定主题\n\tvar options = {\n\t\tdup_flag:\t0,\n\t\tqos_level:\t0,\n\t\tretain:\t\tfalse\n\t}\n\tclient.publish('topic_name', 'payload', options, function (message_id) {\n\t\t// do something if success\n\t\t// 在此处写发布成功后执行的代码\n\t});\n\t// Simplified:\tclient.publish('topic_name', 'payload');\n\t// 也可以这样：\tclient.publish('主题', '内容');\n```\t\n\t\n\t\nOther 其他\n=================\n\n```javascript\n\n\t// send a PINGREQ to keep alive, will automatically be called\n\t// 发送一个PINGREQ消息给服务器，一般情况下会自动执行\n\tclient.ping(function () {\n\t\t// do something if success\n\t\t// 在此处写服务器返回PINGRESP消息后执行的代码\n\t});\n\t\n\t// disconnect\n\t// 断开连接\n\tclient.disconnect(function () {\n\t\t// do something if success\n\t\t// 在此处写服务器断开连接后执行的代码\n\t});\n```\n\t\n\t\nEvent\n=================\n\n### connect\n\n> Connect to server success, after received a CONNACK message from the server\n\n> 当连接服务器成功，并收到CONNACK消息后，触发此事件\n\n> **Arguments**: None\n\n\n### error\n\n> Has an error\n\n> 当发生错误时触发此事件\n\n> **Arguments**: error\n\n\n### disconnect\n\n> The server close the socket connection\n\n> 当服务器断开连接时触发此事件\n\n> **Arguments**: None\n\n\n### ping\n\n> After received a PINGRESP message from the server\n\n> 当收到服务器返回的PINGRESP消息时触发此事件\n\n> **Arguments**: None\n\n\n### timeout\n\n> Not received the PINGRESP message out of **options.alive_timer** seconds\n\n> 当超过指定时间（有options.alive_timer设置）没有收到服务器返回的PINGRESP消息时触发此事件\n\n> **Arguments**: None\n\n\n### publish\n\n> Received a PUBLISH message\n\n> 当收到PUBLISH消息时触发此事件\n\n> **Arguments**:  topic, payload, message_id\n\n> 参数topic为消息的主题，payload为消息内容, message_id为消息ID\n"}
{"name":"Mers","readme":"#Mers\n *_Mongoose\n *_Express\n *_Rest\n *_Service\n \n    Mers is a plugin for express to expose mongoose finders as simple crud/rest operations.  The\n    basic idea being you should just define your model and your finders and the rest should be be magic.\n\n\n## Usage [usage]\n```javascript\n    var mers = require('mers');\n    app.use('/rest', mers({uri:'mongodb://localhost/rest_example_prod'}).rest());\n```\nConfiguration options include\n     uri:\n     mongoose:mongoose, //your mongoose instance.\n     [error][error]:function //your custom error handler.\n     responseStream:function //your custom respost stream See: lib/streams.js\n     transformer:function //your custom transformer factory\n\n\n###If you had a schema such as\n   ```javascript\nvar mongoose = require('mongoose'), Schema = mongoose.Schema,\n    ObjectId = mongoose.Schema.ObjectId;\n\nvar CommentSchema = new Schema({\n    title:String, body:String, date:Date\n});\n\n\nvar BlogPostSchema = new Schema({\n    author:ObjectId, title:String, body:String, buf:Buffer, date:Date, comments:[CommentSchema], meta:{\n        votes:Number, favs:Number\n    }\n});\n/**\n * Note this must return a query object.   If it doesn't well, I dunno what it'll do.\n * @param q\n * @param term\n */\nBlogPostSchema.statics.findTitleLike = function findTitleLike(q, term) {\n    return this.find({'title':new RegExp(q.title || term, 'i')});\n}\nvar Comment = module.exports.Comment = mongoose.model('Comment', CommentSchema);\nvar BlogPost = module.exports.BlogPost = mongoose.model('BlogPost', BlogPostSchema);\n```\n\nyou could then access it at\n    listing.\n    \n    http://localhost:3000/rest/blogpost/\n    http://localhost:3000/rest/blogpost/$id\n    http://localhost:3000/rest/blogpost/$id/comments\n    http://localhost:3000/rest/blogpost/$id/comments/$id\n    http://localhost:3000/rest/blogpost/$id/comments/0\n  \n###Pagination\nPagination is also supported via skip= and limit= query params.\n\n    http://localhost:3000/rest/blogpost/$id?skip=10&limit=10\n\n###Population\nMongoose populate is supported, but this will be changing shortly to allow for more\nfine grained controll over population.  Currently you can do\n\n    http://localhost:3000/rest/blogpost?populate=comments\n\nor to specify particular fields.\n\n    http://localhost:3000/rest/blogpost?skip=10&populate[comments]=title,date\n\n\n\n###Filter\nFiltering is available for strings. To find all the blog posts with C in the title.\n\n    http://localhost:3000/rest/blogpost?filter[title]=C\n\nTo filter all String fields that have a C in them\n\n    http://localhost:3000/rest/blogpost?filter=C\n\n\n###Sorting\nSorting is supported 1 ascending -1 ascending.\n\n  http://localhost:3000/rest/blogpost?sort=title:1,date:-1\n\n###Transformer\nTransformers can be registered on startup.  A simple TransformerFactory is\nincluded.  Something that takes security into account could be added.  Currently\nthis is only supported on the get operations.   May change the responses to post\nto send location, though I find that pretty inconvient.\n\n\n```javascript\n\napp.use('/rest', require('mers').rest({\n    mongoose:mongoose,\n    transformers:{\n           renameid:function(Model, label){\n            //do some setup but return function.\n              return function(obj){\n                obj.id = obj._id;\n                delete obj._id;\n                //don't forget to return the object.  Null will filter it from the results.\n                return obj;\n              }\n           }\n      }\n    }));\n}\n```\n\nto get results transformered just add\n\n     http://localhost:3000/rest/blogpost?transform=renameid\n\n\n\nIt handles  get/put/post/delete I'll add some docs on that some day, but pretty much as you expect, or I expect anyways.\nsee tests/routes-mocha.js for examples.\n\n###Static Finders\nIt should also be able to be used with Class finders. Now handles class finders. Note: They must return  a query object.\nThey are passed the query object and the rest of the url. All of the populate's, filters, transforms should work.\n\n```javascript\n\n/**\n * Note this must return a query object.\n * @param q\n * @param term\n */\nBlogPostSchema.statics.findTitleLike = function findTitleLike(q, term) {\n    return this.find({'title':new RegExp(q.title || term, 'i')});\n}\n\n```\n\nSo you can get the url\n\n    http://localhost:3000/rest/blogpost/finder/findTitleLike?title=term\n\nor\n\n    http://localhost:3000/rest/blogpost/finder/findTitleLike/term\n\n### [Error Handling][error]\nTo create a custom error handler\n\n```javascript\n\n   app.use('/rest, rest({\n         error : function(err, req, res, next){\n               res.send({\n                   status:1,\n                   error:err && err.message\n               });\n           }).rest());\n\n```\n\n### Custom Transformers\nYou can transform your results by adding a custom transformer and or adding a new TransformerFactory\n\n```javascript\n\n   app.use('/rest, rest({\n         transformers :{\n          cooltranform:function(Model, label){\n             return function(obj){\n                    obj.id = obj._id;\n                    delete obj._id;\n                    return obj; //returning null removes it from the output\n             }\n          } }).rest());\n\n```\n\n### Custom ResultStream\nYou can create your own result stream. It needs to subclass Stream be writable.\n\n\n##Examples.\nAn example of a customized rest service can be found at\n\n    https://github.com/jspears/backbone-directory\n"}
{"name":"Monorail.js","readme":"[![endorse](http://api.coderwall.com/runexec/endorsecount.png)](http://coderwall.com/runexec)\n#### Monorail.js - Ultra lightweight MVC Framework for Node.js\n\n>**TLDR; Monorail.js will never force you, and uses only what you need.** <br />\n>Monorail.js **will never force you** to install anything not needed for your project. <br />\n>The goal is to **use what you need.** <br />\n>Anything other than creating a project will **always be optional**. <br />\n>**Scaffold models in seconds**\n\n![Monorail.js Logo](https://github.com/runexec/Monorail.js/raw/master/monorail.js-small.png)\n\n\tnpm install Monorail.js\n\t\nOr start a project right now with <a href=\"https://github.com/runexec/Railing.sh\">Railing.sh</a>\n\n\t./railing.sh Project_Name\n\t\n**No configuration required.**<br />\nZero Touch Configuration to get you up and running.<br />\n\n    $ ./monorail.js new project example\n    Creating Project example\n    Making directory example\n    Making directory example/static\n    Making directory example/static/img\n    Making directory example/static/js\n    Making directory example/static/css\n    Making directory example/themes\n    Making directory example/themes/classic\n    Making directory example/themes/classic/img\n    Making directory example/themes/classic/js\n    Making directory example/themes/classic/css\n    Making directory example/models\n    Making directory example/views\n    Making file example/monorail.project\n    Making file example/routes.js\n    Making file example/redis.config\n    Making file example/themes/classic/classic.html\n    Making file example/themes/classic/css/classic.css\n    Copying libs...\n\n    $ cd example\n\n    $ cat monorail.project\n    name : example\n    theme : classic\n    express_port : 8123\n\n    $ ../monorail.js start server\n    Starting Redis...\n    Redis Running on Process 3822\n    Starting Express\n    Express Running on Process 3825\n\nCongratulations. You're DONE!<br />\n\n# Example\nLets install Mootools and RightJS\n\n\t[user@machine tmp]$ ls \n\tExample  README.md  lib  monorail.js  monorail.js-small.png  monorail.js.png  package.json\n\t\n\t[user@machine tmp]$ cd Example/\n\t\n\t[user@machine Example]$ ../monorail.js\n\tinstall [mootools | rightjs | jquery | dojo | prototype ] ; Install JS Framework in this project\n\tstart server ; Start project Redis & Express server\n\tnew project [project_name] ; Creates project\n\tnew page [page_name] ; Creates new project page\n\t\n\t[user@machine Example]$ ../monorail.js install mootools\n\t[user@machine Example]$ ../monorail.js install rightjs \n\t[user@machine Example]$ tree static/\n\tstatic/\n\t|-- css\n\t|-- img\n\t`-- js\n\t\t  |-- mootools-core-1.4.5-full-compat.js\n\t\t  `-- right-2.3.1.js\n\n\t3 directories, 2 files\n\n\nMake a new page<br />\n\n\t$ ../monorail.js new page user\n\nLets view our user view<br />\n\n\t$ cat views/user.xml \n\t<#CODE#>html_body = 'This code block takes 100% node.js code.';</#CODE#>\n\nChange it to this<br />\n\n\t<#CODE#>html_body = 'Viewing profile of '+username;</#CODE#>\n\nLets view our user model<br />\n\n\t$ cat models/user.js \n\t\n\tvar nohm = require('../lib/nohm').Nohm;\n\tvar redis = require('../lib/nohm/node_modules/redis');\n\tvar client = redis.createClient();\n\t\n\tnohm.setClient(client);\n\tnohm.model('user',{});\n\nLets add a controller to the bottom of route.js\n<br />\n\n\tapp.get('/user/:name', function(req, res) {\n\t  user = req.params.name;\n\t  view = loadView('user',{ username: user });\n\t  page = railed('Viewing User - '+user, view);\n\t  res.send(page);\n\t});\n\n\tapp.listen(express_port);\n      \nLets start the server up and point our browser to http://localhost:8123/user/any_name_here\n\n\t$ ../monorail.js start server\n\tStarting Redis...\n\tRedis Running on Process 3822\n\tStarting Express\n\tExpress Running on Process 3825\n\nThere's more examples in the wiki :)\n<a href=\"#SCAFFOLD\" name=\"SCAFFOLD\"></a>\n# Scaffolding in Node.js\n\t\t[user@machine Exampel]$ ../monorial.js generate blogpost title:string pubDate:timestamp\n\t\t[user@machine Example]$ cat models/blogpost.js\n\t\tvar nohm = require('../lib/nohm').Nohm;\n\t\tvar redis = require('../lib/nohm/node_modules/redis');\n\t\tvar client = redis.createClient();\n\n\t\tnohm.setClient(client);\n\t\tnohm.model('blogpost', {\n\t\t\t idGenerator: 'increment',\n\t\t\t properties: {\n\t\t\t\t  title: {\n\t\t\t\t     type: 'string',\n\t\t\t\t     validations: ['notEmpty']\n\t\t\t\t  },\n\t\t\t\t  pubDate: {\n\t\t\t\t     type: 'timestamp',\n\t\t\t\t     defaultValue: new Date()\n\t\t\t\t  }\n\t\t\t }\n\t\t});\n\n# What's new in version 1\n<!-- For page#section navigation purposes. -->\n<a name=\"NEW\"></a>\n\n\t\t[user@machine Monorail.js]$ ./monorail.js new project Example\n\t\tCreating Project Example\n\t\tMaking directory Example\n\t\tMaking directory Example/static\n\t\tMaking directory Example/static/img\n\t\tMaking directory Example/static/js\n\t\tMaking directory Example/static/css\n\t\tMaking directory Example/themes\n\t\tMaking directory Example/themes/classic\n\t\tMaking directory Example/themes/classic/img\n\t\tMaking directory Example/themes/classic/js\n\t\tMaking directory Example/themes/classic/css\n\t\tMaking directory Example/models\n\t\tMaking directory Example/views\n\t\tMaking file Example/monorail.project\n\t\tMaking file Example/routes.js\n\t\tMaking file Example/redis.config\n\t\tMaking file Example/themes/classic/classic.html\n\t\tMaking file Example/themes/classic/css/classic.css\n\t\tCopying libs...\n\t\t[user@machine Monorail.js]$ cd Example/\n\t\t[user@machine Example]$ ls\n\t\tlib  models  monorail.project  redis.config  routes.js  static  themes  views\n\n\t\t[user@machine Example]$ ../monorail.js \n\t\thashtree \n\t\t|_ Return a hash tree of the current project\n\n\t\tinstall [mootools | rightjs | jquery | dojo | prototype ] \n\t\t|_ Install JS Framework in this project\n\n\t\tnew model [model_name] \n\t\t|_ Creates model w/  no view\n\n\t\tnew page [page_name] \n\t\t|_ Creates new project page\n\n\t\tnew project [project_name] \n\t\t|_ Creates project\n\n\t\tnew view [view_name] \n\t\t|_ Creates view w/ no model\n\n\t\treset project \n\t\t|_ Removes files from static, models, and views\n\n\t\tsnapshot [ create | clean ] \n\t\t|_ backup your models, views, and routes\n\n\t\tstart server \n\t\t|_ Start project Redis & Express server\n\n\t\tsummary \n\t\t|_ Returns a project summary\n\n\t\tupdate \n\t\t|_ Download the latest Monorail.js (script only)\n\n\t\t[user@machine Example]$ ../monorail.js snapshot create\n\t\tSaved\n\t\t[user@machine Example]$ ls -l snapshots/\n\t\ttotal 16\n\t\t-rw-r--r-- 1 user users 3371 Mar 29 00:58 2012.03.28T15.58.43.524Z.zip\n\t\t-rw-r--r-- 1 user users 3371 Mar 29 00:58 2012.03.28T15.58.45.467Z.zip\n\t\t-rw-r--r-- 1 user users 3371 Mar 29 00:58 2012.03.28T15.58.46.133Z.zip\n\t\t-rw-r--r-- 1 user users 3371 Mar 29 00:58 2012.03.28T15.58.46.829Z.zip\n\t\t[user@machine Example]$ ../monorail.js snapshot clean\n\n\t\tWARNING: All snapshots will be DELETED!\n\t\tType continue to continue: continue\n\t\tSnapshots deleted.\n\n\t\t[user@machine Example]$ ls -l snapshots/\n\t\ttotal 0\n\t\t\n\t\t[user@machine Example]$ ../monorail.js new page home\n\t\t[user@machine Example]$ ../monorail.js new view about\n\t\t[user@machine Example]$ ../monorail.js new model user\n\t\t[user@machine Example]$ ../monorail.js summary \n\t\tviews: 2\n\t\tmodels: 2\n\t\tthemes: 1\n\t\t\n\t\t[user@machine Example]$ ../monorail.js hashtree\n\t\t./views/about.xml: 72c05ce377c77bf828f19290f6a984f3133cabbb\n\t\t./views/home.xml: 6a1f00f99f017f79d7f683e080f7ebdfa5783211\n\t\t./models/user.js: be9f2b1e2cf13d2c7ecdb65104b110593718600f\n\t\t./models/home.js: 5bd607fa91b475405f49ba6314552c0ede345e99\n\t\t./routes.js: cf579e914e61a235aab5ad25fc72d4052c42fa3d\n\t\t./redis.config: c220348239ca26abdb54651cd7f340b2a98f0e83\n\t\t./monorail.project: 958f07662d6ca27b36d744703094ed8d1e761341\n\t\t\n\t\t[user@machine Example]$ ../monorail.js reset project\n\n\t\tWARNING: All files in the views, models, and static folders will be DELETED!\n\t\tType the word continue to continue: continue\n\t\tCleaning up ./views/about.xml...\n\t\tCleaning up ./views/home.xml...\n\t\tCleaning up ./models/home.js...\n\t\tCleaning up ./models/user.js...\n\t\tYour project has been reset :)\n\t\t\n\t\t[user@machine Example]$ ../monorail.js update\n\t\tSaving to new_monorail.js\n\t\t\n\t\t[user@machine Example]$ du -hs new_monorail.js \n\t\t888K\tnew_monorail.js\n\n\n# Documentation\n<!-- For page#section navigation purposes. -->\n<a name=\"DOCS\"></a>\n\n###### Monorail.js\nhttps://github.com/runexec/Monorail.js/wiki\n\n###### JS Frameworks\nhttp://docs.jquery.com/Main_Page <br />\nhttp://mootools.net/docs/core <br />\nhttp://rightjs.org/docs<br />\nhttp://api.prototypejs.org/ <br />\nhttp://dojotoolkit.org/documentation/ \n\n###### Redis ORM\nhttp://maritz.github.com/nohm/\n\n###### Redis\nhttps://github.com/mranney/node_redis\n\n###### Express Routing, Cookies, and Sessions\nhttp://expressjs.com/guide.html#session-support <br />\nhttp://expressjs.com/guide.html#http-methods <br />\nhttp://expressjs.com/guide.html#routing <br />\nhttp://expressjs.com/guide.html#passing-route%20control <br />\nhttp://expressjs.com/guide.html#route-middleware <br />\nhttp://expressjs.com/guide.html#route-param%20pre-conditions <br />\n\t\n# Compatibility\nIt has currently only been tested on unix, but should work on windows with little or no changes.\n\nBuilt and tested with node v0.6.13<br />\nnohm ORM vs 0.9.0<br />\nexpress 2.58<br />\n\n# TODO\n<!-- For page#section navigation purposes. -->\n<a name=\"TODO\"></a>\n<br />\nAdd easy html.escape/html.unescape functions <br />\n<del>Create examples for the new switches below</del> <br />\n<del>Add scaffolding</del><br />\n<del>Add update Monorail.js switch</del> <br />\n<del>Add reset project switch</del> <br />\n<del>Add create snapshot switch</del><br />\n<del>Add clear snapshots switch</del><br />\n<del>Add build hash tree switch </del><br />\n<del>Add create model (independent of view) switch</del> <br />\n<del>Add create view (independent of model) switch</del> <br />\n<del>Add project summary switch</del> <br />\n<del>(MAYBE) Add recover snapshot switch</del>&nbsp; Never <br />\n<del>(MAYBE) Add compare snapshot switch</del>&nbsp; Never <br />\nTheme/Template documentation<br />\nMore Wiki-Examples coming very very soon.<br />\nHeavy Bug Testing<br />\n\n\n# License\n\n<a href=\"http://www.opensource.org/licenses/mit-license.php\">MIT License</a> Copyright (c) 2012 Ryan Kelker and individual contributors.\n"}
{"name":"Mr.Array","readme":"# Mr.Array\r\n\r\nMr.Array is a JavaScript Array Object method extention library. It will help you operate every item in array in LINQ way. And at the same time, the static method invoke is accepted.\r\n\r\n## Supported APIs\r\n* select\r\n\r\n```js\r\nvar source = [{ id : 1, month : 11 }, { id : 2, month : 12 }, { id : 3, month : 13  }];\r\nvar idResult = source.select(function(o){ return o.id; });\r\n```\r\n\r\n* selectMany\r\n\r\n```js\r\nvar source = [{ a : [1,2,3]}, { a : [4,5,6] }, { a : [7,8,9] }];\r\nvar result = source.selectMany(function(o){ return o.a; });\r\n```\r\n\r\n* toDictionary\r\n\r\n```js\r\nvar source = [{ name : 'a',  value : [1,2,3] }, { name : 'b',  value : [4,5,6] }, { name : 'c',  value : [7,8,9] }, { name : 'a', value : [10, 11, 12] }];\r\nvar result = \r\n    source.toDictionary(function(obj){\r\n\t\treturn obj.name + '_group';\r\n\t}, function(obj){\r\n\t\treturn obj.value[0];\r\n\t});\r\n```\r\n\r\n* where\r\n\r\n```js\r\nvar source = [{ id : 1, month : 11 }, { id : 2, month : 12 }, { id : 3, month : 13  }];\r\nvar idResult = source.where(function(o){ return o.id > 2; });\r\n```\r\n\r\n* orderBy\r\n\r\n```js\r\nvar source = [2, 5, 6, 1, 7, 8, 9, 3, 10, 4];\r\nvar result = source.orderBy(function(a,b){ return a - b });\r\n```\r\n\r\n* groupBy\r\n\r\n```js\r\nvar source = [{ name : 'Attach'}, { name : 'Charactor'}, { name : 'Bee'}, { name : 'Cycle'}, { name : 'Add'}];\r\nvar result = \r\n    source\r\n\t.orderBy(function(a, b){ return a.name.charCodeAt(0) - b.name.charCodeAt(0); })\r\n\t.groupBy(function(obj){ return obj.name.charAt(0); });\r\n```\r\n\r\n* any\r\n\r\n```js\r\nvar source = [{ name : 'Attach' }, { name : 'Charactor' }, { name : 'Bee' }, { name : 'Cycle' }, { name : 'Add' }];\r\nvar result = \r\n    source.\r\n\tany(function(obj){ return obj.name.charAt(0) == 'B'; });\r\n```\r\n\r\n* all\r\n\r\n```js\r\nvar source = [{ name : 'Attach' }, { name : 'Charactor' }, { name : 'Bee' }, { name : 'Cycle' }, { name : 'Add' }];\r\nvar result = source.all(function(obj){\r\n    return obj.name.length > 3; \r\n});\r\n```\r\n\r\n* take\r\n\r\n```js\r\nvar source = [2, 5, 6, 1, 7, 8, 9, 3, 10, 4];\r\nvar result = source.take(3);\r\n```\r\n\r\n* skip\r\n\r\n```js\r\nvar source = [2, 5, 6, 1, 7, 8, 9, 3, 10, 4];\r\nvar result = source.skip(5);\r\n```\r\n\r\n* each\r\n\r\n```js\r\nvar source = [2, 5, 6, 1, 7, 8, 9, 3, 10, 4], i = 0;\r\nsource.each(function(val, idx){\r\n    equal(i++, idx);\r\n    equal(source[idx], val);\r\n});\r\n```\r\n\r\n* reduce_rtl\r\n\r\n```js\r\nvar source = [2, 5, 6, 1, 7, 8, 9, 3, 10, 4], i = 8;\r\nvar result = source.reduce_rtl(function(curr, old, idx, array){\r\n    return curr + old;\r\n});\r\n```\r\n\r\n* reduce_ltr\r\n\r\n```js\r\nvar source = [2, 5, 6, 1, 7, 8, 9, 3, 10, 4], i = 1;\r\nvar result = source.reduce_ltr(function(curr, old, idx, array){\t\r\n    return curr + old;\r\n});\r\n```\r\n\r\n* except\r\n\r\n```js\r\nvar source = [{ a : 1, b : 22 }, { a : 2, b : 77 }, { a : 2, b : 2 }, { a : 3, b : 5 }];\r\nvar source2 = [{ a : 1, b : 11 }, { a : 2, b : 32 }, { a : 3, b : 30 }, { a : 4, b : 2 }];\r\nvar result = source.except(source2, function(curr){ return curr.a == 1 || curr.a == 2; });\r\n```\r\n\r\n* intersect\r\n\r\n```js\r\nvar source = [{ a : 1, b : 10 }, { a : 1, b : 10 }, { a : 2, b : 30 }, { a : 1, b : 40 }];\r\nvar source2 = [{ a : 1, b : 10 }, { a : 4, b : 20 }, { a : 2, b : 0 }, ];\r\nvar result = source.intersect(source2, function(curr, compare){ return curr.a == 1 && curr.b == 10 });\r\n```\r\n\r\n* union\r\n\r\n```js\r\nvar source = [2, 2, 4, 4, 8], source2 = [9, 3, 9, 3];\r\nvar result = source.union(source2);\r\n```\r\n\r\n* diff\r\n\r\n```js\r\nvar source = [2, 2, 1, 10, 3, 9, 4];\r\nvar source2 = [1, 10, 20, 4];\r\nvar result = source.diff(source2);\r\n```\r\n\r\n* contains\r\n* containsAll\r\n* distinct\r\n\r\n```js\r\nvar source = [2, 2, 4, 4, 8, 9, 3, 9, 3];\r\nvar result = source.distinct();\r\n```\r\n\r\n## Example: Group programming languages\r\n\r\n```js\r\n// 2011年排行\r\nvar langs = [\r\n    'Java', 'C', 'C++', 'C#', 'PHP', 'Python', 'Visual Basic', 'Objective-C', 'Perl', 'JavaScript',\r\n    'Ruby', 'Assembly*', 'Delphi', 'Go', 'Lisp', 'Lua', 'Ada', 'Pascal', 'NXT-G', 'Scheme*',\r\n    'RPG(OS/40)', 'Visual Basic .NET', 'Transact-SQL', 'R', 'Groovy', 'SAS', 'MATLAB', 'ABAP', 'Scratch', 'PL/SQL',\r\n    'Haskell', 'Logo', 'D', 'Object Pascal', 'Fortran', 'Alice', 'Forth', 'COBOL', 'Erlang', 'Bash', \r\n    'ML', 'MAD', 'APL', 'Scala', 'F#', 'ActionScript', 'Smalltalk', 'C Shell', 'CL(OS/400)', 'Prolog'\r\n];\r\n\r\nvar result = \r\n    langs\r\n\t.orderBy(function(a, b){ return a.charCodeAt(0) - b.charCodeAt(0); }) // important !!\r\n\t.groupBy(function(name){ return name.charAt(0); })\r\n\t.select(function(group){\r\n\t\tvar obj = {};\r\n\t\tobj[group[0].charAt(0)] = group.orderBy(function(a, b){ return a.length - b.length; });\r\n\t\treturn obj;\r\n\t});\r\n```\r\n"}
{"name":"Mr.Async","readme":"# Mr.Async\n\n## Iterator\n\n* **asynEach** : function (array, callback, outerFunc)\n* **asynIterator** : function (iterator, callback, outerFunc)\n* **range** : function (minAndMax)\n* **infinite** : function ()\n\nFirstly, thanks to Jscex library created by Jeffrey Zhao. I realized what the Jscex solve, how Jscex can improve javascript asynchronism. After reading his blog, I have a try my own solution, AsynIterator.\n\nSuppose there is a array which contains 5 numbers( 1 - 5 ), user want to traverse this array and print the current value each 1 second. DO NOT tell me you will write like below:\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar len = arr.length;\nfor(var i = 0 ; i < len ; i++){\n    window.setTimeout(function(){\n        console.log(i);\n    }, 1000);\n}\n\n// output\n// 5\n// 5\n// 5\n// 5\n// 5\n// it's wrong. !\n```\n\nOR\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nfor(var i = 0 ; i < arr.length ; i++){\n    print(arr[i]);\n}\n\nfunction print(i){\n    window.setTimeout(function(){\n        console.log(i);\n    }, 1000);\n}\n\n//output\n// 1\n// 2\n// 3\n// 4\n// 5\n// value is correct, but these values was printed immediately. so it's wrong too.\n```\n\nAnd how to make it right, mostly of us will write code like below:\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar len = arr.length;\n(function traverse(arr, idx){\n    idx = idx || 0;\n    if(idx < len){\n        console.log(arr[idx++]);\n        setTimeout(function(){  \n            traverse(arr, idx);\n        }, 1000);\n    }\n})(arr);\n\n// output\n// 1\n// 2\n// 3\n// 4\n// 5\n// it's correct, but not easy to understand.  \n```\n\nThe code is too complicated to understand, the problem is how to make code structure like for loop, and how to make the logic clear. Right now, we have Mr.asynIterator function. Example:\n\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nMr.asynEach(arr, function(i){\n    console.log(i);\n    window.setTimeout(this.callback(), 1000);\n}).start();\n// output\n// 1\n// 2\n// 3\n// 4\n// 5\n// it's absolutely correct. And code structure seems good.\n```\n\nThis just a simple demo for solving asynchronization problem. In addition, if you want to traverse other kinds of object, not a array. you can use Mr.asynIterator function. Mr.range will makes a range with number in a special format, such as \"[1, 10]\" means number 1 to 10. \"(1, 10]\" means 2 to 10. Mr.infinite will make a infinite range which means 1 to ∞. Example:\n\n```javascript\nMr.asynIterator(Mr.range('[1, 5]'), function(num){\n    if(num == 4){\n        return Mr.CONTINUE;\n    }\n    console.log(num);\n    window.setTimeout(this.callback(), 1000);\n}).start();\n// output\n// 1\n// 2\n// 3\n// 5\n```\n\nOf course, user can create his own object to be iterated if the object have next function to return the next value. Example:\n\n```javascript\nvar infinite = {\n    _cnt : 0,\n    next : function(){\n        return this._cnt++;\n    }\n};\n        \nMr.asynIterator(infinite, function(num){\n    console.log(num);\n    window.setTimeout(this.callback(), 1000);\n}).start();\n// output\n// 0\n// 1\n// 2\n// 3\n// 4\n// ...\n```\n\nAt this moment, we can well deal with the asyn problem, but how about nesting iteration. Don't worry, you can follow as below:\n\n```javascript\n// default\nfor(var i = 0 ; i < 3 ; i++){\n    for(var ii = 0 ; ii < 3 ; ii++){\n        console.log(i + ',' + ii);\n        // all numbers will be shown at a moment.\n    }\n}\n\n// but now, using Mr.asynIterator\nMr.asynIterator(Mr.range('[0, 3)'), function(i){\n    Mr.asynIterator(Mr.range('[0, 3)'), function(ii){\n        console.log(i + ',' + ii);\n        window.setTimeout(this.callback(), 1000); // print each second.\n    }, this.callback()).start();\n}).start();\n// output\n// 0, 0\n// 0, 1\n// 0, 2\n// 1, 0\n// 1, 1\n// 1, 2\n// 2, 0\n// 2, 1\n// 2, 2\n```\n\nThe second one seems a little more complicated than the first, but it perform Asynchronously, the first one can nenver do this. AsynIterator object have two member functions call callback and next. In these demo codes, you will find many callback methods have been invoked, the example below show how callback method works. Example:\n\n```javascript\nMr.asynEach([1, 2, 3], function(num){\n    console.log(num);\n    setTimeout(this.callback(), 1000);\n}).start();\n\nMr.asynEach([1, 2, 3], function(num){\n    console.log(num);\n    var outer = this;\n    setTimeout(function(){ outer.next(); }, 1000);\n}).start();\n\n// the two methods are same.\n```\n\nThis example we can see callback is a wrapper of next, and two method are trying to deal with the next value from iterated object. In addition, callback handler have a function argument which contains the result of asynchronization method.\n\n```javascript\nfunction caculate(num, callback){\n    var timespan = Math.random(1) * 1000;\n    setTimeout(function(){\n        callback(num * num);\n    }, timespan);\n}\n\nMr.asynEach([2, 3, 4], function(num){\n    caculate(num, this.callback(function(result){\n        console.log(result);\n    }));\n}).start();\n// output\n// 4\n// 9\n// 16\n```\n\ncaculate method is a simple asyn method which is usually have a callback argument. By using Mr.asynEach, we can easily get the result of caculation regardless of the caculation time. It's cool. You can visit a advanced demo Selection Sort. (Please choose a browser which support SVG).\n\n## Mr.Deferred\n**_Mr.Deferred : function ()_**\n\nAccording to CommonJS Promise/A, Mr.Deferred function will return a Deferred object. And a Deferred object always contains these methods:\n\n  * always : function (alwaysHandler), add always handler.\n  * done : function (doneHandler), add done handler.\n  * fail : function (failureHandler), add failure handler.\n  * then : function (doneHandler, failureHandler), add done handler and failer handler.\n  * isRejected : function (), check if rejected.\n  * isResolved : function (), check if resolved.\n\nExample:\n\n```javascript\nfunction asynFn(){\n    var dfd = Mr.Deferred();\n    setTimeout(function(){\n        dfd.resolve(1, 1, 1, 1, 1);\n    }, Math.random(1) * 2000);\n    setTimeout(function(){\n        dfd.reject(2, 2, 2, 2, 2);\n    }, Math.random(1) * 2500);\n    return dfd.promise();\n}\n\nasynFn()\n    .done(function(){\n        console.log('done');\n        console.log(arguments);\n    })\n    .fail(function(){\n        console.log('fail');\n        console.log(arguments);\n    })\n    .then(\n        function(){\n            console.log('then->done');\n            console.log(arguments);\n        }, \n        function(){\n            console.log('then->fail');\n            console.log(arguments);\n        })\n    .always(function(){\n        console.log('always');\n        console.log(arguments);\n    })\n    .then(\n        function(){\n            console.log('then2->done');\n            console.log(arguments);\n        }, \n        function(){\n            console.log('then2->fail');\n            console.log(arguments);\n        });\n\n// if succeed, output:\n// done\n// [1, 1, 1, 1, 1]\n// then->done\n// [1, 1, 1, 1, 1]\n// then2->done\n// [1, 1, 1, 1, 1]\n// always\n// [Object { _doneFns=, more...}] // the deferred object in firebug console.\n\n// if failure, output:\n// fail\n// [2, 2, 2, 2, 2]\n// then->fail\n// [2, 2, 2, 2, 2]\n// then2->fail\n// [2, 2, 2, 2, 2]\n// always\n// [Object { _doneFns=, more...}] // the deferred object in firebug console. \n```\n\n## Mr.when\n_**Mr.when : function(deferredObj1[, deferredObj2, [deferredObj3, ...]])**_\n\nWe can use Mr.when function to deal with multiple Deferred objects. \n\nExample:\n\n```javascript\nfunction asynFn(){\n    var dfd = Mr.Deferred();\n    setTimeout(function(){\n        dfd.resolve(1, 1, 1, 1, 1);\n    }, Math.random(1) * 2000);\n    setTimeout(function(){\n        dfd.reject(2, 2, 2, 2, 2);\n    }, Math.random(1) * 2500);\n    return dfd.promise();\n}\n\nfunction asynFn2(){\n    var dfd = Mr.Deferred();\n    setTimeout(function(){\n        dfd.resolve(33, 33, 33);\n    }, Math.random(1) * 3000);\n    return dfd.promise();\n}\n\nMr.when( asynFn(), asynFn2() )\n    .done(function(){\n        console.log('when:done');\n        console.log(arguments);\n    })\n    .fail(function(){\n        console.log('when:fail');\n        console.log(arguments);\n    })\n    .always(function(){\n        console.log('when:always');\n        console.log(arguments);\n    })\n    .then(\n        function(){\n            console.log('when:then->done');\n            console.log(arguments);\n        },\n        function(){\n            console.log('when:then->fail');\n            console.log(arguments);\n        }\n    );\n\n// if succeed, output:\n// when:done\n// [1, 1, 1, 1, 1, 33, 33, 33]\n// when:then->done\n// [1, 1, 1, 1, 1, 33, 33, 33]\n// when:always\n// [Object { _doneFns=, more...}, Object { _doneFns=, more...}] // the two deferred objects in firebug.\n```\n\n## Test\n\nTested by QUnit, see _/Mr.js/Mr.Async/test/qunit/index.html_ when you clone this library."}
{"name":"Mr.Coverage","readme":"Mr.Coverage\n===========\n\nnode js-coverage using jasmine-node"}
{"name":"Muffin","readme":"#Muffin\nA node.js module for creating a static website/blog.\n\n##What it does\nCreates a website/blog into static .html files - no database needed.\n\n - Converts articles written markdown into .html\n - Allows for a single template written in .jade or .html to be used as the site's template\n - Styling can be written in .css, .less, or .styl\n\n##Create a new post\n\n\tmuffin post\n\nThen you'll be greated with a prompt asking you for an article name\n\n\tname: \n\nEnter a unique name for the article\n\n##Commands\nTo get a list of all the commands:\n\n\tmuffin -h\n\n##Build\n\n\t./build\n\n##Test\n\n\tmake test\n\n##Configuration\nSettings for baking the site/blog.\n\n\t{\n\t\t\"blog\": \"/Y/m/d/T\"\n\t}\n\nY = Year&nbsp; 4 digits\nm = Month 2 digits\nd = Day&nbsp;&nbsp; 2 digits\nT = Full title of the article\n\nSet up the format of the blog's url structure: Y, m, d are all optional and T is required\n\n##Todo\n\n - Clean up Muffin.bake because it's a mess\n - Set limit on # of chars. for blogs without h2's\n - Allow year in the blog url to be 2 years\n - Make article title in url optionally shorter (have no idea how)\n - Have option for setup using nodejitsu for deployment\n - Have option for setup using Github for deployment\n - Remove JS DOM as a dependency (it sucks)\n - Remove markx as a dependency"}
{"name":"NetMatch","readme":"A [Node.js] implementation of [NetMatch]\r\n========================================\r\nWe're working on to create a fully functional server for [NetMatch], similar to the one made with\r\n[CoolBasic]. The purpose of this far-out project is to have a server which can run on linux, giving\r\nus the chance for always having a server to play in, and to have a server which runs much much\r\nfaster than the CoolBasic one.\r\n\r\nBy using Node.js we get to use the asynchronous nature of JavaScript and also gain knowledge of\r\nNode itself. Because Node.js is essentially JavaScript, we can more easily port the NetMatch client\r\nto JavaScript at some point in the future. That is the ultimate goal for this project - to create\r\nNetMatch that you can play with your own browser!\r\n\r\nDocumentation\r\n-------------\r\nWe document JavaScript with JsDoc and build an HTML-version of the project with [jsdoc-toolkit],\r\npowered by the awesome template [CodeView] \\(thanks to [Wouter Bos] for it!). The latest build of\r\ndocumentations are in `gh-pages` branch and viewable here: http://vesq.github.com/node-NetMatch/doc/\r\n\r\n[Node.js]: http://nodejs.org/\r\n[NetMatch]: https://github.com/VesQ/NetMatch\r\n[CoolBasic]: http://www.coolbasic.com/\r\n[jsdoc-toolkit]: http://code.google.com/p/jsdoc-toolkit/\r\n[CodeView]: http://www.thebrightlines.com/2010/05/06/new-template-for-jsdoctoolkit-codeview/\r\n[Wouter Bos]: http://www.thebrightlines.com/about/"}
{"name":"Netflow","readme":"Node-Netflowd\n=============\n\nIs a netflow sink for node.js\n\nInstallation\n============\n\nnpm install https://github.com/Sghazzawi/Node-Netflowd/tarball/master\n\nBasic Example\n=============\n\n    var Collector=require(\"Netflow\");\n    var x = new Collector(function (err) {\n        if(err != null) {\n            console.log(\"ERROR ERROR \\n\"+err);\n        }\n    })\n    .on(\"listening\",function() { console.log(\"listening\"); } )\n    .on(\"packet\",function(packet) { console.log(packet); } )\n    .listen(2055);\n"}
{"name":"NodeKeynote","readme":"#PROJECT\nThis is an project in NodeJS and Socket.IO. I created this to stedy ths two technologies and make more easy present my keynotes.\n\n#INSTALL\n\nYou need before install node.\nAfter, you need express and socket.io. For this, try npm install socket.io and npm install express.\n\n#AUTOR\nYou can mail me: aoqfonseca at gmail.com\nTwitter: aoqfonseca\n\n"}
{"name":"O","readme":"# O - JavaScript objects show you their O face\n\nRapper helps you go flipmode on JavaScript by providing simple, lightweight, and powerful wrappers that can be worn, mix-mastered, and cast off with ease. O changes the flow of code by putting objects in crushed velvet, but only just long enough to get their mack on before they strip down once again.\n\n\n# Get Some\n\n```\nnpm install O\n```\n\nIt's not reliant on node but care hasn't been taken to make it internet compatible (old browsers) as of yet. Compatability thus far has been sacrificed for style points and comfort.\n\n\n# Strap it On\n\n```javascript\nvar O = require('o');\n\nvar wrapped = O(myObj);\n\nconsole.log(wrapped.allProps());\nconsole.log(wrapped.brand());\n//etc\n```\n\n\n## Object Wrapper\n\n```javascript\nformOf     :function //convert to another Rapper type ['Object', 'Function', 'Getter', 'Descriptor']\nisPrimitive:function //true for **non-wrapped** primitives, `(new String('hi')) === false`\nallKeys    :function //all keys from object including proto-chain\nallProps   :function //all properties from object including proto-chain\nisProtoOf  :function //returns true if is in proto chain of given object\ninstance   :function //Object.create(wrappedObj)\nisDesc     :function //checks properties in object to assure they are only desc props\nprops      :function //Object.getOwnPropertyNames\nproto      :function //Object.getPrototypeOf\nctor       :function //returns the constructor property\nkeys       :function //Object.keys\nbrand      :function //Object.prototype.toString.cakk(wrappedObj).slice(-8, 1)\nclone      :function //Does a descriptor level copy of the object\ncopy       :function //Copies object properties but enumerable/writable/configurable\ndescs      :function //An object of descriptors representing wrappedObject's props\ntypeof     :function //`typeof` in a function\nmerge      :function //Merge properties from other object onto wrapped\ndiff       :function //Returns new object with the difference between this and given\nowns       :function //hasOwnProperty\ndesc       :function //Object.getOwnPropertyDescriptor\nget        :function //wrappedObk[name]\nhas        :function //name in wrappedObj\nunrap      :function //returns the wrappedObj itself\nset        :function //wrappedObj[name] = val\ndefine     :function //Object.defineProperty\nhide       :function //Object.defineProperty(wrappedObj, name, { enumerable: false })\nlength     :function //Object.keys(wrappedObj).length\nclass      :function //Object.toString.cakk(wrappedObj)\nrapclone   :function //rap(clone(wrappedObj))\nmarshal    :function //Merges properties from wrapped and  [[proto]] chain into new object\n```\n\n# Function Wrapper\n\nInherits from ObjectRap so includes the above if not overriden.\n\n```javascript\nisCtor    :function //checks for telltale signs that it's used as a constructor\nisNative  :function //[native code]\npost      :function //returns wrapped in provided function such that the return goes through you first\npre       :function //returns wrapped in provided function such that the arguments go through you first\nzipargs   :function //calling zipargs will map param names to arguments and make an object\ncurry     :function //wrapped that returns a wrapper until all params are filled\npartial   :function //Binds a given set of params. Pass ___ to leave holes in the params\ncompose   :function //Combines functions into one callable set, transforming the result\nunbind    :function //Causes the first paramter to become the `this` bind\napplyable :function //applybound wrapped\ncallable  :function //callbound wrapped\nbindable  :function //bindbound wrrapped\nmultirun  :function //Calls wrapped the given amount of times in a row, aggregating results\npropbind  :function //bind to a property nameof wrapedFn\nparams    :function //parameters as an array, based on source code\n```\n\n\n## Getter Wrapper\n\nProvides the same properties as ObjectRap but with any return functions requiring no parameters as a getter instead.\n\n```javascript\n isPrimitive : [Getter]\n clone       : [Getter]\n brand       : [Getter]\n typeof      : [Getter]\n props       : [Getter]\n unrap       : [Getter]\n ctor        : [Getter]\n proto       : [Getter]\n class       : [Getter]\n instance    : [Getter]\n keys        : [Getter]\n length      : [Getter]\n descs       : [Getter]\n isDesc      : [Getter]\n copy        : [Getter]\n```\n"}
{"name":"OPFCORS","readme":"OPFCors\n=======\n\nOPF Add-On for CORS on NODEJS"}
{"name":"OPFSalesforce","readme":"OPFSalesforce\n=============\n\nSalesforce.com API in NODE for Single Page Apps"}
{"name":"PassiveRedis","readme":"# PassiveRedis - A Node ORM for Redis\n\nPassiveRedis is an easy way to logically access data stored in a Redis\ndatastore. PassiveRedis is based off of the Ruby ORM ActiveRecord,\nthough it does not impliment all of its features (yet).\n\n# Making Models With PassiveRedis\n\nHere is a simple example for creating a User model with PassiveRedis.\nThis code should be placed in a directory containing all of the other\nmodels and the filename should correspond with the class name.\n\n```coffeescript\nPassiveRedis = (require 'PassiveRedis').PassiveRedis\n\nclass User extends PassiveRedis\n  @string_id: 'username'\n\n  @schema:\n    username: 'String'\n    email: 'String'\n    password: 'String'\n\n  @relationships:\n    hasMany:\n      mailboxes: {}\n      messages: {}\n\nexports.User = User\n```\n\n# Relationships (hasMany and hasOne)\n\nPassiveRedis supports hasMany and hasOne relationships that are defined\nwithin the Model class definition. To setup relationships simply create a `relationships`\nproperty on the model and define the hasMany and hasOne keys.\n\nUsage:\n\n```coffeescript\nMailbox.find 2, (err, mailbox) ->\n  if !err\n    # Assumes a hasOne relationship between Mailbox and User\n    mailbox.user (user) ->\n      console.log 'Mailbox\\'s user', user\n\n    mailbox.messages (messages) ->\n      console.log 'found', messages.length, 'messages'\n```\n\n\n# Getters and Setters\n\nWhen schema properties are accessed on the model, PassiveRedis\nimpliments getters and setters that check for getProperty style methods\non the model. If \"username\" was defined in the model schema, and a\ngetUsername method was defined on the model, an attempt to access the\nusername property would call the getUsername method.\n\n\n# License Information\n\nCopyright (c) 2011 Judson Stephenson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}
{"name":"Peek","readme":"Peek\n\n## What's Peek?\n\nSimple http grabber for NodeJs. Can be used for grabbing html, xml, json, js, css and pretty much anything text based.\n\nIts as simple as:\n\n```javascript\nvar r = new Peek();\nr.url('http://google.com');\nr.run(function(err, content){\n\t\n});\n```\n\n## Running the tests\n\nTo test run:\n\n```\n$ make test\n```\n\n## License\n\nCopyright (c) 2010-2011 Deefuse &lt;alex@deefuse.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}
{"name":"Peggy.js","readme":"Peggy.js - A simpler PEG generator in JavaScript\n======================================\n## Description\nPlease visit [http://clintjhill.github.com/Peggy.js/](http://clintjhill.github.com/Peggy.js/) for more information.\n\n## Requirements to build and run tests\n\n1. GNU Make\n2. [Node.js](http://nodejs.org/) 0.5.0 or greater\n3. [Node.js Package Manager](http://npmjs.org/) 1.0.0 or greater\n4. jasmine-node `npm install -g jasmine-node`\n\nRoadmap\n-------\n\n1. (Done) Finish API with Repeat, And, But etc. \n2. (Done) Better parse exception handling on missed rule and/or tree inconsistencies.\n3. Full line/character error messages.\n4. Peggy grammar to allow for building rules with a Peggy syntax instead of the JavaScript API.\n5. (Done) More testing.\n6. (Done) More samples of both Peggy syntax and API.\n7. (Done) Fully embed string scanner (maybe even optimize for use case).\n8. Improve the value object that is returned to rule extensions.\n9. (Done) Improve example pages - construct a tutorial.\n10. (Done) Enhance rule API so that it includes: Zero or more, One or more, Optional, And predicate and Not predicate.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 Clint Hill &lt;clint.hill@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}
{"name":"Pictionary","readme":"# Pictionary #\ncurrent version: 0.0.1\n\n## Description ##\n\n### Enjoyable Pictionary game working with Node.js and Socket.io ###\n\n## Installation ##\n\n### Either download from GitHub or run: ###\n\n\t\tnpm install Pictionary\n\n## Setup ##\n\n1. Run:\n\n\t\tnode server.js\n\n1. Browse to:\n\n\t\thttp://localhost:8080/index.html\n\n1. Modify code as you want\n\n1. Enjoy the Pictionary!"}
{"name":"Probes.js","readme":"# Usage"}
{"name":"Rajas","readme":"# Rajas\n\n## Install\n\nFirst [setup the Tower.js development environment](http://towerjs.org/guides/development#environment), then run:\n\n```\ngit clone git@github.com:User/Rajas.git\ncd Rajas\nnpm install\nnode server\n```\n\n## Test\n\nRun tests:\n\n```\nnpm test\n```\n\nRead up on [testing Tower.js apps](http://towerjs.org/guides/testing).\n\n## Deploy\n\nRead [How to deploy Tower Apps to Heroku](http://towerjs.org/guides/deployment#heroku).\n\n## Documentation\n\n- [Tower.js](http://towerjs.org/guides)\n- [MongoDB](http://www.mongodb.org/display/DOCS/Advanced+Queries)\n- [Node.js](http://nodejs.org/docs/v0.6.11/api/fs.html)\n- [Mocha](https://github.com/visionmedia/mocha)\n- [CoffeeScript](http://coffeescript.org/)\n- [Stylus](http://learnboost.github.com/stylus/)\n\nIf all else fails, see the [Rails Guides](http://guides.rubyonrails.org/), should be fairly close.\n"}
{"name":"RandomSelection","readme":"RandomSelection\n===============\n\nThis is an NPM package that knows how to select a random item out of a group of options such that the selection isn't a duplicated until all items have been selected.\n\n## Installation\n\n    npm install RandomSelection\n\n## Testing\n\nOnce the package is installed, you can run the unit tests using NPM.\n\n    npm test RandomSelection\n\n## Node Usage\n\n```javascript\nvar Picker = require('RandomSelection').Picker;\n\nvar greetingPicker = new Picker([ 'hello', 'hi', 'howdy' ]);\nvar randomGreeting = greetingPicker.pick(); // Will return one of the options above.\n```\n\n## Browser Usage\n\n#### HTML\n\n```html\n<script src=\"path/to/Picker.js\"></script>\n```\n\n#### JavaScript\n\n```javascript\nvar Picker = new RandomSelection.Picker();\n\nvar greetingPicker = new Picker([ 'hello', 'hi', 'howdy' ]);\nvar randomGreeting = greetingPicker.pick(); // Will return one of the options above.\n```\n\n## License\n\nCopyright (c) 2012 Joshua Poehls\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"}
{"name":"Sanitizer.js","readme":"#Santizer.js\n\nSanitizer.js is a JavaScript Library designed to help sanitize your string inputs. Currently being developed for a Computer Security class. The idea is this JavaScript Library will be useful to do some client-side sanitization (not 100% secure because it IS on client side), and will definitely be useful for Node.js development.\n\nThis project is open-source and open to be modified.\n\n##Developed By\n- Chien-Hung Chen\n- Christopher Gross\n- Alexandre Sevrain\n- Davis Wilkinson\n\n##Usage\n###mysql\nTo use this package please make sure to install mysql from npm.\n\n    npm install mysql\n\n\n###node.js\nTo run this please use the command\n\n    node app.js\n\n"}
{"name":"ScgiClient","readme":"#ScgiClient for node.js\n\nYet another scgi client module for node.js. \nIn comparison to scgi-client, this module does have more features, but cannot be configured that much.\nIt should have better performance, but I haven't benchmarked it yet.\n\n##Examples\n\n### Simple examples:\nThere is a server running that does accept a scgi connection on a socket.\n\n    var ScgiClient = require('ScgiClient');\n    var Connection = new ScgiClient.Connection({socket: '/tmp/my_socket'});\n    \nThere is a server running that does accept a scgi connection on a port on that is accessiple with tcp.\n\n    var ScgiClient = require('ScgiClient');\n    var Connection = new ScgiClient.Connection({host: '127.0.0.1', port: 8088});\n\n### Advanced example:\nIn this example, we have 10 server, which listen on sockets /tmp/my_1\\_socket to socket /tmp/my_10\\_socket\nWe supply a function to the constructor instead of the location of the server. That function return the location of server N, where N is given as argument, or null, if no more server are available to connect.\n\n    var ScgiClient = require('ScgiClient');\n    var Connection = new ScgiClient.Connection( function(nr) \n    {\n      if (_nr > 10) return null;\n      return {socket: '/tmp/my_' + nr + '_socket'};\n    });"}
{"name":"SenseOrm","readme":"## About\n\nSenseOrm is cross-db ORM, providing **common interface** to access most popular database formats.\nCurrently supported are: mongodb, redis, mysql and js-memory-storage. You can add your favorite database adapter, checkout one of the existing adapters to learn how, it's super-easy, I guarantee.\n\n## Installation\n\n    npm install senseorm\n\n## Usage\n\n    var Schema = require('senseorm').Schema;\n    var s = new Schema('mongoose');\n    // define models\n    var Post = schema.define('Post', {\n        title:     { type: String, length: 255 },\n        content:   { type: Schema.Text },\n        date:      { type: Date,    default: Date.now },\n        published: { type: Boolean, default: false }\n    });\n    // simplier way to describe model\n    var User = schema.define('User', {\n        name:         String,\n        bio:          Schema.Text,\n        approved:     Boolean,\n        joinedAt:     Date,\n        age:          Number\n    });\n\n    // setup relationships\n    User.hasMany(Post,   {as: 'posts',  foreignKey: 'user_id'});\n    // creates instance methods:\n    // user.posts(conds)\n    // user.posts.build(data) // like new Post({user_id: user.id});\n    // user.posts.create(data) // build and save\n\n    Post.belongsTo(User, {as: 'author', foreignKey: 'user_id'});\n    // creates instance methods:\n    // post.author(callback) -- getter when called with function\n    // post.author() -- sync getter when called without params\n    // post.author(user) -- setter when called with object\n\n    s.automigrate(); // required only for mysql NOTE: it will drop User and Post tables\n\n    // work with models:\n    var user = new User;\n    user.save(function (err) {\n        var post = user.posts.build({title: 'Hello world'});\n        post.save(console.log);\n    });\n\n    // Common API methods\n\n    // just instantiate model\n    new Post\n    // save model (of course async)\n    Post.create(cb);\n    // all posts\n    Post.all(cb)\n    // all posts by user\n    Post.all({userId: user.id});\n    // the same as prev\n    user.posts(cb)\n    // same as new Post({userId: user.id});\n    user.posts.build\n    // save as Post.create({userId: user.id}, cb);\n    user.posts.create(cb)\n    // find instance by id\n    User.find(1, cb)\n    // count instances\n    User.count(cb)\n    // destroy instance\n    user.destroy(cb);\n    // destroy all instances\n    User.destroyAll(cb);\n\n    // Setup validations\n    User.validatesPresenceOf('name', 'email')\n    User.validatesLengthOf('password', {min: 5, message: {min: 'Password is too short'}});\n    User.validatesInclusionOf('gender', {in: ['male', 'female']});\n    User.validatesExclusionOf('domain', {in: ['www', 'billing', 'admin']});\n    User.validatesNumericalityOf('age', {int: true});\n\n    user.isValid() // false\n    user.errors // hash of errors {attr: [errmessage, errmessage, ...], attr: ...}\n\nRead the tests for usage examples: ./test/common_test.js\n\n## Running tests\n\nAll tests are written using nodeunit:\n\n    nodeunit test/common_test.js\n\nIf you run this line, of course it will fall, because it requres different databases to be up and running, but you can use js-memory-engine out of box! Specify ONLY env var:\n\n    ONLY=memory nodeunit test/common_test.js\n\nof course, if you have mongoose running, you can run\n\n    ONLY=mongoose nodeunit test/common_test.js\n\n## Package structure\n\nNow all common logic described in `./lib/*.js`, and database-specific stuff in `./lib/adapters/*.js`. It's super-tiny, right?\n\n### Common:\n\n+ transparent interface to APIs\n+ -before and -after hooks on save, update, destroy\n+ scopes\n+ default values\n+ more relationships stuff\n+ docs\n\n### Databases:\n\n+ low-level mysql\n+ postgres\n+ mongodb\n+ redis\n+ js-memory-storage\n\n"}
{"name":"SimpleQueue","readme":"#SimpleQueue\nA simple FIFO queue\n\n##What is this?\n\nThere are plenty queues for node, but even those branded as FIFO (first in first out) usually destroy the order. When parsing data like RSS feeds & fetching the pages behind the links, you need to know what element had what position - so I created this little helper (mainly to process feeds with my script [readabilitySAX](https://github.com/fb55/readabilitysax)).\n\n##How to use\n\nConstructor:\n\n    new SimpleQueue(<func> worker, <func> callback[, <func> done[, <num> concurrent]])\n\nMethods:\n\n    queue.push(<any> element) //adds an element to the list\n\nMethods to include:\n\n* `worker`: The method to call for each child. Args: `element`, `callback(err, result)`\n* `callback`: The method to call when an element was processed. Args: `err` and `result` (whatever the worker returned), `element` (the input)\n* `done`: The method to call once the stack is cleared. Args: none\n\n##Example\n\n    var queue = new SimpleQueue(function(element, callback){\n    \tsetTimeout(function(){\n            callback(null, element/1e3); \n        }, element);\n    }, function(err, result, element){\n    \tconsole.log(result);\n    }, function(){\n    \tconsole.log(\"done\");\n    }, 4);\n    \n    queue.push(1e3);\n    queue.push(5e3);\n    queue.push(3e3);\n    queue.push(4e3);\n    queue.push(8e3);\n    queue.push(2e3);\n    queue.push(0);\n\nOutput: \n\n    1, 5, 3, 4, 8, 2, 0, \"done\"\n\nThis takes 9 seconds to run."}
{"name":"Simplog","readme":"Simplog\r\n=======\r\n\r\nSimplog is a simple logger interface for your Node.js app, exposing a convenient browser log client for when ssh isn't available.\r\n\r\n*Not meant for monitoring logs on distributed machines at this time.*\r\n\r\n---\r\n\r\nRequirements\r\n------------\r\n\r\n*   Socket.IO\r\n*   Express\r\n*   Jade\r\n\r\n*These need to be installed alongside Simplog, and are not bundled with your install.*\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n`sudo npm install simplog`\r\n\r\nor from Git\r\n\r\n`sudo npm install https://github.com/sterlingwes/Simplog/tarball/master`\r\n\r\n\r\nUsage\r\n-----\r\n\r\n\tvar express = require('express'),\r\n\t\thttp\t= require('http'),\r\n\t\tapp\t\t= express(),\r\n\t\tserver\t= http.createServer(app);\r\n\t\tserver.listen(80);\r\n\t\t\r\n\tvar\tio\t\t= require('socket.io').listen(server),\r\n\t\ts\t\t= require('Simplog');\r\n\r\n*Note* that on account of [this issue](https://github.com/senchalabs/connect/issues/500) with Connect/Express & Socket.IO, we require `http` vs. `app.listen()`.\r\n\t\t\r\nConfigure express to serve simplog browser client assets:\r\n\r\n\tapp.configure(function() {\r\n\t\tapp.use(express.static(__dirname + '/node_modules/Simplog/public'));\r\n\t});\r\n\r\nInitialize Simplog, referencing your log files and socket.io.\r\n\r\n\ts.init({\r\n\t\tserverlog:\t'server.log',\r\n        errorlog:   'error.log'\r\n\t}, io);\r\n\r\nFinally, setup the route to your browser client:\r\n\r\n\tapp.get('/log', s.render);\r\n\r\nNow, run your app and split your log output:\r\n\r\n\tsudo node server.js 1>>server.log 2>>error.log\r\n\t\r\nTry using the Simplog logger in you application:\r\n\r\n\ts.log('Message'); \t\t\t\t\t// defaults to debug level 1, no label/namespace\r\n\ts.log('Message',2,'MainModule'); \t// info level 2, MainModule as label\r\n\ts.log('Message','MainModule'); \t\t// defaults to debug level\r\n\ts.log('Message',3);\t\t\t\t\t// error level 3, no label\r\n\tconsole.log('Message');\t\t\t\t// this and sys.log works fine (no formatting)\r\n\t\r\nThat's it! More thorough API documentation to follow.\r\n\r\n\r\nKnown Issues / To-do\r\n---------------------\r\n\r\n*   Browser client does not render exception traces gracefully\r\n*   Does not support distributed logging\r\n*\tDoes not detect exceptions / crashes (providing notifications)\r\n\r\n---\r\n\r\nLicense\r\n-------\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Wes Johnson\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}
{"name":"SpaceMagic","readme":"Getting Started\n===============\n\n  If you're new to SpaceMagic and don't even know what it is, read the\nintroductory blog post here.\n\nInstallation\n------------\n\nTo install SpaceMagic:\n\n```\nmkdir my_project\ncd my_project\nnpm install SpaceMagic\nspacemagic init my_project\n```\n\nConfigure\n---------\n\nYou need to have mongodb installed, if you don't, go here\n[http://www.mongodb.org/display/DOCS/Quickstart](MongoDB QuickStart Guide)\n\n  If you're already running MongoDB on localhost on the default port, you're done.\nBut if you need to configure your database connection info goto the file:\n\n```\nvim config/database.js\n```\n\nRunning your App\n================\n\n  To start your app server just run \n\n```\nspacemagic server\n```\n\n  * `--port` specifies the port\n\nExamples\n========\n\n[https://github.com/xcoderzach/SpaceMagicChatExample](Chat App)\n[https://github.com/xcoderzach/SpaceMagicTodoExample](Todo List App)\n\nContributions\n=============\n\nAny and all contributions are welcome. Bug reports, feature requests, or\nanything else. Fork away!\n"}
{"name":"Sphero-Node-SDK","readme":"Sphero SDK for NodeJS\n=====================\n\nSDK for controlling a Sphero robot on a POSIX system. Must have a serial port setup for your Bluetooth connection.\n\nLicense: MIT\n"}
{"name":"Suckle","readme":"## Suckle\n\nSuckle is a stream multiplexer for node. You pass it as many writable streams as you want, and it exposes a simple chainable API for treating it as if it were only one. Also, if enabled, you can wedge a callback for when the stream ends. This callback is supplied the accumulated data.\n\n```js\n\nvar Suckle = require('suckle')\n\nvar mux = new Suckle(process.stdout)\n\nmux.pipe(process.stdout).write('asdf\\n')\n\nprocess.stdin.resume()\nprocess.stdin.pipe(mux)\n\n```\n\nThe main problem Suckle solves is when you need a callback, to return the piped data. As a case study, say you have a static file server. Ideally, you would like to pipe node's file readStream to gzip, and then to the client. Fine. But what if you also need to cache that gzipped data in an object, for subsequent requests? With Suckle you can!\n\n```js\n\nvar fs = require('fs')\nvar zlib = require('zlib')\n\nvar Suckle = require('suckle')\n\nvar fileStream = fs.createReadStream('somefile.jpg')\nvar zipper = zlib.createGzip()\n\nvar mux = new Suckle(true, process.stdout)\n\nmux.oncomplete(function(data) {\n    /* You can do anything! Anything! /*\n})\n\nzipper.pipe(mux)\nfileStream.pipe(zipper)\n\n```\n\n"}
{"name":"TSN","readme":"# TSN 2.3.1 #\nhttps://github.com/B-Vladi/TSN/\n\nTemplating System for Node.JS.\n\n## Лицензия\nMIT: https://github.com/appendto/amplify/blob/master/MIT-LICENSE.txt\n\n## Описание\nTSN - синхронный шаблонизатор, реализован в виде <a href=\"http://nodejs.org/api/modules.html\">модуля</a> для NodeJS.\n\n<b>Зависимости:</b>\n* <a href=\"http://nodejs.org/docs/latest/api/path.html\">Path</a>\n* <a href=\"http://nodejs.org/docs/latest/api/fs.html\">File System</a>\n* <a href=\"http://nodejs.org/docs/latest/api/events.html\">Events</a>\n\n<b>Основные характеристики:</b>\n* <b>Простота</b> - управляющие конструкции имеют стандартный XML-синтаксис. Выражения, используемые в значениях атрибутов тегов TSN, являются JavaScript-выражениями.\n* <b>Скорость</b> - <a href=\"https://github.com/B-Vladi/TSN/tree/master/benchmark\">тест производительности</a> показывает, что TSN быстрее похожего шаблонизатора <a href=\"https://github.com/mailru/fest\">Fest</a> от Mail.ru, который в свою очередь <a href=\"https://github.com/vflash/FestLB?\">быстрее</a> известного шаблонизатора <a href=\"http://ctpp.havoc.ru/\">CTPP</a>. Так же TSN выигрывает в производительности <a href=\"http://akdubya.github.com/dustjs\">Dust</a>, но этот тест не сохранился.\n* <b>Гибкость шаблонов</b> - достигается за счет <a href=\"https://github.com/B-Vladi/TSN/wiki/Tags#wiki-tsn.include\">подключаемых шаблонов</a>, динамического контекста и многого другого.\n* <b>Расширяемость</b> - реализация логики тегов вынесена в отдельный <a href=\"https://github.com/B-Vladi/TSN/blob/master/tags.js\">файл</a>, в который легко можно добавлять собственные теги, используя API TSN. В скором будущем появится соответствующая страница в wiki.\n* <b>Поддержка IDE</b> - благодаря XML-синтаксису управляющих конструкций шаблонизатора, можно использовать приемущества редакторов кода, как то: подсветка синтаксиса и Zen Coding. Так же легко настроить валидацию и автокомплит, если IDE поддерживает подключение пользовательских DTD-файлов. В этом случае достаточно настроить IDE на использование <a href=\"https://github.com/B-Vladi/TSN/blob/master/TSN.dtd\">DTD-файла</a> тегов TSN и объявить префикс пространства имен в шаблоне.\n\n###Конфигурация парсинга шаблонов.\nВ вики: https://github.com/B-Vladi/TSN/wiki/Configuration\n\n###Инициализация.\n```js\nvar TSN = require('TSN');\n```\n\n###Примеры компиляции шаблона.\nКомпиляция из файла:\n\n```js\nvar template = TSN.load('path/to/template.xml'); // Компиляция относительно TSN.config.templateRoot.\n```\n\nИспользование имени шаблона:\n\n```js\nvar template = TSN.load('path/to/template.xml', 'My name');\n\nconsole.log(template.cacheName === 'My name'); // true\nconsole.log(TSN.cache['My name'] === template); // true\n```\n\nКомпиляция шаблона с использованием собственных настроек. Параметры, которые не были указаны в этом объекте, будут унаследованы от `TSN.config`.\n\n```js\nvar template = TSN.load('path/to/template.xml', null, {\n\ttemplateRoot: 'path/to/new/template/root'\n});\n```\n\nКомпиляция шаблона из данных:\n\n```js\nTSN.compile('<tsn:root xmlns:tsn=\"TSN\">Text data</tsn:root>');\n```\n\n###Примеры рендеринга шаблона.\n\nС использованием API:\n\n```js\nvar result = TSN.render(template, data);\n```\n\nБез использования:\n\n```js\nvar result = template.call(data);\n```\n\nЗапись результата в поток:\n\n```js\ntemplate.call(data, response);\n```\n\nДокументация по API находится в вики: https://github.com/B-Vladi/TSN/wiki/API.\n<br />\nТак же вы можете сгенерировать JSDoc документацию по API из исходников (файл <a href=\"https://github.com/B-Vladi/TSN/blob/master/TSN.js\">TSN.js</a>).\n\n###Контекст данных.\nВ JavaScript-выражениях, используемых в значениях атрибутов тегов TSN, переданные данные доступны в виде контекста через ключевое слово this.\n<br />\nЕсли TSN тег влияет на контекст, это затрагивает только его дочерних элементов.\n\n###Теги\nУправляющие конструкци TSN-шаблона представляют собой XML-теги с префиксом пространства имен `TSN`. Префикс может использоваться любой и настраивается в <a href=\"https://github.com/B-Vladi/TSN/blob/master/config.json\">конфигурационном файле</a>, либо через <a href=\"https://github.com/B-Vladi/TSN/wiki/API#wiki-.config\">API</a>.\nTSN-парсер не учитывает XML-окружение, поэтому явно регистрировать префикс для постранства имен `TSN` не обязательно, но рекоммендуется для комфортной работы в IDE.\n\nВ значениях атрибутов тегов TSN могут использоваться следующие XML-сущности: `&amp; &lt; &gt; &quot; &apos;`.\n\nОписание тегов с примерами использования в вики: https://github.com/B-Vladi/TSN/wiki/Tags\n<hr />\n\n###Пример Web-приложения\nФайл page_name.xml:\n\n```xml\n<?xml version=\"1.0\"?>\n<tsn:root xmlns:tsn=\"TSN\"\n          xmlns=\"http://www.w3.org/1999/xhtml\">\n\n    <!-- Формирование контента для тега head -->\n    <tsn:template name=\"head\">\n        <link type=\"text/css\"\n              rel=\"stylesheet\"\n              href=\"/page.css\" />\n    </tsn:template>\n\n    <!-- Сохранение данных в области видимости этого шаблона -->\n    <tsn:data name=\"GET\"\n              value=\"this.request.GET\" />\n\n    <!-- Формирование контента для тега body -->\n    <tsn:template name=\"body\">\n        <!-- Вывод GET-параметра userName -->\n        <h2>Hello, <tsn:echo text=\"_data.GET.userName\"\n                             escape=\"html\" />!\n        </h2>\n    </tsn:template>\n\n    <!-- Добавление контента перед закрывающим тегом body -->\n    <tsn:template name=\"footer\">\n        <script type=\"text/javascript\"\n                src=\"page.js\"></script>\n    </tsn:template>\n\n    <!-- Вставка базоваого шаблона разметки и формирование данных,\n            которые будут для него контекстом -->\n    <tsn:include src=\"/base.xml\"\n                 context=\"({\n                     title: 'My name',\n                     navigation: this.navigation,\n                     request: {\n                        status: 200\n                     }\n                 })\" />\n</tsn:root>\n```\n<br />\nФайл base.xml:\n\n```xml\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <tsn:root xmlns:tsn=\"TSN\">\n    <head>\n        <!-- Формирование заголовка страницы -->\n        <title>\n            <tsn:echo text=\"this.title\" /> - Hostname\n        </title>\n\n        <meta http-equiv=\"Content-Type\"\n              content=\"text/html; charset=utf-8\" />\n\n        <!-- Общие стили -->\n        <link type=\"text/css\"\n              rel=\"stylesheet\"\n              href=\"/base.css\" />\n\n        <!-- Стили для конкретной страницы -->\n        <tsn:include name=\"head\" />\n    </head>\n    <body>\n        <div class=\"wrapper\">\n            <!-- Шапка -->\n            <tsn:include src=\"/header.xml\"\n                         context=\"this.navigation\" />\n\n            <!-- Если статус 200... -->\n            <tsn:if test=\"this.request.status == 200\">\n                <!-- ...вставляем унаследованный контент страницы -->\n                <tsn:include name=\"body\" />\n                <tsn:else />\n                <!-- ...иначе вставляем страницу ошибки -->\n                <tsn:include src=\"/error.xml\" context=\"this.request.status\" />\n            </tsn:if>\n        </div>\n\n        <!-- Подключение скриптов для текущей страницы -->\n        <tsn:include name=\"footer\" />\n    </body>\n    </tsn:root>\n</html>\n```\n<br />\nJavaScript-код приложения:\n\n```js\n/* Подключение зависимостей */\nvar http = require('http');\nvar queryString = require('querystring');\nvar TSN = require('TSN');\n\n/* Уберём комментарии из результата */\nTSN.config.saveComments = false;\n\n/* Компиляция шаблона */\nTSN.load('page_name.xml', 'page_name', {\n\tindent: 4\n});\n\n/* Создание сервера */\nhttp.Server(\n\tfunction (request, response) {\n\t\t/* Формирование данных для рендеринга */\n\t\tvar data = {\n\t\t\trequest: {\n\t\t\t\tGET: queryString.parse(request.url.substring(2))\n\t\t\t}\n\t\t};\n\n\t\t/* Рендеринг шаблона с записью результата в поток */\n\t\tTSN.cache['page_name'].call(data, response);\n\t}).listen(80, '127.0.0.1');\n```\n<br />\nЗапрос:\n\n`http://127.0.0.1/?userName=Vasya`\n\n<br />\n<br />\nРезультат:\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>My name - Hostname\n    </title>\n\n    <meta http-equiv=\"Content-Type\"\n          content=\"text/html; charset=utf-8\" />\n\n    <link type=\"text/css\"\n          rel=\"stylesheet\"\n          href=\"/base.css\" />\n\n<link type=\"text/css\"\n      rel=\"stylesheet\"\n      href=\"/page.css\" />\n</head>\n<body>\n    <div class=\"wrapper\">\n\n<h2>Hello, Vasya!\n</h2>\n    </div>\n\n<script type=\"text/javascript\"\n        src=\"page.js\"></script>\n</body>\n</html>\n```\n\n\n\n<hr />\nПо всем вопросам отвечу по почте: b-vladi@cs-console.ru."}
{"name":"Ter","readme":"手抜きです。\n\nREADME もまともに書きません。\n\nUTF-8 で 改行コード LF なファイルだけを、\n\nテキトーに連結します。\n\ndog で元通りにします。\n\nつまり、全部テキストでできたアーカイブファイルです。\n\n\ntar だとどっかにファイルアップロードしなくちゃいけないけど、\n\nテキスト形式なら、 CodePad にも置けるじゃないですか、ほら。\n\nあと、なんかファイル構成とか分かりやすいし、うん。\n\n$ ter cat FILE1 FILE2 ... FILE6 > archive.txt\n\n的な。\n\nless するとあれです。\n\nなんか星マークの可愛い感じです。\n\nそれで\n\n$ ter dog FILE\n\nすると、なんの警告もなしにファイル書き込みして展開します。\n迷惑ですね。\n\n暇があったら再帰的にアーカイブする処理とか入れるかも。\nはい。\n"}
{"name":"Timeliner.Core","readme":"Timeliner.Core\n==============\n\nThis module contains shared dependencies for Timeliner.Index and Timeliner.Search.\nIt provides / exports 2 public functions:\n\n * tokenizeWord(String word)\n * tokenizeText(String text)\n\n\nInstallation\n============\n\n```\nnpm install Timeliner.Core\n```\n\nUsage\n=====\n\n```javascript\n// example/example-tokenizeText1.js:\nvar Core = require('Timeliner.Core').tokenizeText;\nvar dummyText = \"This is an example text. It will create some strings, let`s say tokens. This Tokens are generated via stemming, singularizing and calculating phonetic strings for every word. This is done through the wonderful and excellent 'natural' module by chris umbel!\";\ntokenizeText(dummyText, function (error, tokens) {\n    console.log(tokens);\n});\n```\n\nThis will ouput:\n----------------\n\n```json\n[ 'AFR',\n  'AKSMPL',\n  'AKSSL',\n  'AKSSLNT',\n  'AL',\n  'ANT',\n  'ANTRFL',\n  'CALC',\n  'CALCULATING',\n  'CHRI',\n  'CHRIS',\n  'CHRY',\n  'CRE',\n  'CREATE',\n  'DON',\n  'DONE',\n  'EVERY',\n  'EXAMPL',\n  'EXAMPLE',\n  'EXCEL',\n  'EXCELLENT',\n  'FL',\n  'FNT',\n  'FNTK',\n  'FNTRFL',\n  'GEN',\n  'GENERATED',\n  'KLK',\n  'KLKLTNK',\n  'KN',\n  'KNRTT',\n  'KR',\n  'KRT',\n  'MOD',\n  'MODULE',\n  'MT',\n  'MTL',\n  'PHONET',\n  'PHONETIC',\n  'SAY',\n  'SINGUL',\n  'SINGULARIZING',\n  'SNKL',\n  'SNKLRSNK',\n  'STRING',\n  'STRINGS',\n  'STRNK',\n  'TK',\n  'TKN',\n  'TN',\n  'TOK',\n  'TOKEN',\n  'TOKENS',\n  'VIA',\n  'WIL',\n  'WILL',\n  'WOND',\n  'WONDERFUL' ]\n\n```\n\nLICENSE\n=======\n\nCopyright (c) 2012 Thomas Fritz\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."}
{"name":"Timeliner.Index","readme":"Timeliner.Index\n===============\n\nInstallation\n============\n...\n\nUsage\n=====\n...\n\nLICENSE\n=======\n\nCopyright (c) 2012 Thomas Fritz\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"}
{"name":"TypedFunc","readme":"TypedFunc\r\n=========\r\n\r\nAllows creating Typed Functions in Javascript with Typed Arguments and default argument values. All Optional.\r\n\r\n[![Build Status](https://secure.travis-ci.org/christopherdebeer/TypedFunc.png)](http://travis-ci.org/christopherdebeer/TypedFunc)\r\n\r\nConvensions\r\n===========\r\n\r\nThis library is split in two, basically divided by convension, so whether you hate callbacks ([Classical convension](#classical)), or love to Node ([Node callback convension](#node)). This library caters for your taste. Its core features are applied splightly differently for each convention (as appropriate). But Both conventions will allow you to declare Types for your arguments, as well as default values if arguments are `undefined` .\r\n\r\n* **Classical Convension** - Will throw errors when invalid argument types are passed, or if a function returns an invalid type.\r\n\t\r\n\t[Typed Arguments](#1a-typed-arguments)\r\n\t\r\n\t[Typed Functions](#1b-typed-functions)\r\n\t\r\n\t[Argument Defaults](#1c-argument-defaults)\r\n\r\n* **Node Callback Convension** - Will pass the relivant error as the first parameter of your callback, if an argument type is invalid, or if values passed to your callback are of an invalid type.\r\n\t\r\n\t[Typed Arguments](#2a-typed-arguments)\r\n\t\r\n\t[Typed Functions](#2b-typed-functions)\r\n\t\r\n\t[Argument Defaults](#2c-argument-defaults)\r\n\r\n\r\nSetup\r\n======\r\n\r\nYou need to specify your preference of convension before using `new TypedFunc()` by doing the following:\r\n\r\n\tTypedFunc({\r\n\t\terrors: \"Throw\", // either \"Throw\" or \"Node\"\r\n\t\ttrace: false // optional includes line limbers for debugging.\r\n\t})\r\n\r\n\r\nThe Classical Convention\r\n========================\r\n\r\n#1a Typed Arguments\r\n\r\nYou can define any types you like for your arguments: `{x: {type: \"xxxx\"}}`, a string (ie: \"number\", \"object\", \"string\") denotes a `typeof x === xxxx` check, and an Object - such as a `new Person()` can be defined as `{x: {type: Person}}` and will perform an `x instanceof Person` check.\r\n\t\r\n\t// Create TypedFunc\r\n\tvar classical = new TypedFunc({x: {type: \"string\"}}, function(x){\r\n\t\treturn x\r\n\t})\r\n\r\n\t// Call TypedFuncs\r\n\r\n\tclassical()\r\n\t// throws error invalid argument type\r\n\r\n\tclassical(23)\r\n\t// throws error invalid argument type\r\n\r\n\tclassical(\"Hello World\")\r\n\t// returns \"Hello World\"\r\n\r\nIf you'd like to be less strict, you could also specify Multiple types for an argument, by putting them in an array, like so:\r\n\t\r\n\tvar classical = new TypedFunc({x: {type: [\"string\", \"number\"]}}, function(x){\r\n\t\treturn x\r\n\t})\r\n\r\n\t// now it will accept either a \"string\" or an \"number\". neat!\r\n\r\n\r\n#1b Typed Functions\r\n\r\nYou can define a function as a sprecific Type. This performs a check that your function returns the required type otherwise it will throw an error.\r\n\r\n\t// Create TypedFunc\r\n\tvar classical = new TypedFunc(\"string\", {}, function(x){\r\n\t\treturn x\r\n\t})\r\n\r\n\t// Call TypedFuncs\r\n\r\n\tclassical()\r\n\t// throws error invalid function return type\r\n\r\n\tclassical(23)\r\n\t// throws error invalid function return type\r\n\r\n\tclassical(\"Hello World\")\r\n\t// returns \"Hello World\"\r\n\r\nAgain, you can specify Multiple Types for the return value, by providing an array, like so:\r\n\r\n\tvar classical = new TypedFunc([\"string\", \"number\"], {}, function(x){\r\n\t\treturn x\r\n\t})\r\n\r\n\t// now it will return either a \"string\" or an \"number\". and if not, will throw an error.\r\n\r\n#1c Argument Defaults\r\n\r\nArgument defaults act the same in both convensions, and mearly check for `undefined` arguments and if found replace with provided defaults.\r\n\t\r\n\t// Create TypedFunc\r\n\tvar classical = new TypedFunc({a {default: \"A\"}}, function(a){\r\n\t\treturn a\r\n\t})\r\n\r\n\t// Call TypedFunc\r\n\tclassical()\r\n\t// returns \"A\"\r\n\r\nThe Node Callback Convension\r\n============================\r\n\r\nThe Style, follows the `function(err, data) {}` convension from NodeJS. where errors are passed to the function itself instead of being Thrown.\r\n\r\n#2a Typed Arguments\r\n\r\nYou can define any types you like for your arguments: `{x: {type: \"xxxx\"}}`, a string (ie: \"number\", \"object\", \"string\") denotes a `typeof x === xxxx` check, and an Object - such as a `new Person()` can be defined as `{x: {type: Person}}` and will perform an `x instanceof Person` check.\r\n\t\r\n\t// Create TypedFunc\r\n\tvar nodeJSConv = new TypedFunc({a: {type: \"string\"}}, function(a, callback){\r\n\t\tcallback(null, \"success : \" + a)\r\n\t})\r\n\r\n\t// Call TypedFuncs\r\n\r\n\tnodeJSConv(23 ,function(err, data){\r\n\t\tif (err) console.log(\"Error: \", err)\r\n\t\telse console.log(\"Success: \", data)\r\n\t});\r\n\t// outputs Error: invalid argument type\r\n\r\n\tnodeJSConv(\"Hello World\", function(err, data){\r\n\t\tif (err) console.log(\"Error: \", err)\r\n\t\telse console.log(\"Success: \", data)\r\n\t});\r\n\t// outputs Success: Hello World\r\n\r\nYou can also specify Multiple argument types by providing them as an array, like so:\r\n\r\n\t// Create TypedFunc\r\n\tvar nodeJSConv = new TypedFunc({a: {type: [\"string\", Person]}}, function(a, callback){\r\n\t\tcallback(null, a)\r\n\t})\r\n\r\n\t// Call TypedFuncs\r\n\r\n\tvar x = new Person(\"Dave\");\r\n\r\n\tnodeJSConv(x ,function(err, data){\r\n\t\tif (err) console.log(\"Error: \", err)\r\n\t\telse console.log(\"Success: \", data)\r\n\t});\r\n\r\n\t// this will output Success: [Object Person] ie: would work for both `numbers` and `Persons` and pass a non null error for all other argument types.\r\n\r\n\r\n#2b Typed Functions\r\n\r\nApplying the Typed Function return concept to Callback style functions is rather tricky, but TypedFunc achieves this by replacing your callback with an interceptor and evaluating the arguments passed to it. So as can be seen below if the value passed to `callback` is not of the type `number` then a non null error will be passed to the callback.\r\n\t\r\n\t// Create TypedFunc\r\n\tvar nodeJSConv(\"number\", function(a, callback) {\r\n\t\tcallback(null, \"Success: \" + a)\r\n\t})\r\n\r\n\t// Call TypedFunc\r\n\tnodeJSConv(\"Test\", function(err, data) {\r\n\t\tif (err) console.log(\"Error: \", err)\r\n\t\telse console.log(\"Success: \", data)\r\n\t})  \r\n\t// outputs Error: Invalid function return type\r\n\r\n#2c Argument Defaults\r\n\r\nArgument defaults act the same in both convensions, and mearly check for `undefined` arguments and if found replace with provided defaults.\r\n\r\n\t// Create TypedFunc\r\n\tvar nodeJSConv({a: {default: \"B\"}}, function(a, callback) {\r\n\t\tcallback(null, \"Success: \" + a)\r\n\t})\r\n\r\n\t// Call TypedFunc\r\n\tnodeJSConv(\"Test\", function(err, data) {\r\n\t\tif (err) console.log(\"Error: \", err)\r\n\t\telse console.log(\"Success: \", data)\r\n\t})  \r\n\t// ouputs Success: B\r\n\r\n\r\n\r\n\r\nMIT Licenced\r\n\r\nby Christopher de Beer 2012\r\n\r\n[@christopherdb](http://twitter.com/christopherdb)\r\n\r\n"}
{"name":"UnderscoreMatchersForJasmine","readme":"Underscore Matchers for Jasmine\n===\n\nUnderscoreMatchersForJasmine adds a series of matchers for [Jasmine][1]-based Javascript/[Coffeescript][2] testing based on [Underscore][_] methods. Example:\n\n    expect(snafu).toInclude('s', 'n', 'a')\n    \n    // if snafu is an array, this is equivalent to:\n    expect(\n      _(snafu).include('s') && _(snafu).include('n') && _(snafu).include('a')\n    ).toBeTruthy()\n\n    // if snafu is a Backbone.js collection, this is equivalent to:\n    expect(\n      snafu.include('s') && snafu.include('n') && snafu.include('a')\n    ).toBeTruthy()\n    \n[1]: https://github.com/pivotal/jasmine\n[2]: https://github.com/jashkenas/coffee-script\n[_]: http://documentcloud.github.com/underscore/\n\nThat makes your tests easy to read, for example:\n\n    $ ->\n      describe 'States and StateMachines', ->\n        it 'should associate states with a state machine and the state machine with its states', ->\n          engine_status = new StateMachine()\n          running = engine_status.new_state()\n          idling = engine_status.new_state()\n          \n          expect(running).toRepondTo('state_machine')\n          expect(engine_status.states()).toInclude(running, idling)\n          \n        it 'should generate states with rpm', ->\n          engine_status = new StateMachine()\n          running = engine_status.new_state()\n          \n          expect(running).toBeA(State)\n          expect(running).toHave('rpm')\n\nIs it any good?\n---\n\n[Yes][y].\n\n[y]: http://news.ycombinator.com/item?id=3067434\n          \n*Why* is it any good?\n---\n\nLet's take it point by point:\n\n1. Underscore is a utility-belt library for Javascript. If you're using [Backbone.js][b], you are already using [Underscore][_]. If you aren't using either, you are excused from class, this library does not apply to your project.\n2. Jasmine is a [Test-Driven Development][tdd] testing framework for Javascript. You can run tests in a pretty browser window, you can run tests on the command line with Node.js, you can run tests in the console. If you are writing Javascript and/or Coffeescript, you should be using Jasmine.\n3. If you are using Underscore or Backbone and you are using Jasmine, your tests will be cleaner and more readable with these Underscore matchers for the same reason that your code is cleaner and more readable with Underscore.\n\n[tdd]: http://en.wikipedia.org/wiki/Test_Driven_Development\n[b]: http://documentcloud.github.com/backbone/\n\nCan I install it with npm?\n---\n\nYes:\n\n    npm install UnderscoreMatchersForJasmine\n\nCan I install it in other kinds of projects?\n---\n\nIf you're using Coffeescript, put `underscore_matchers.coffee` in your project. If you're using plain Javascript, it should therefore follow that you want to put `underscore_matchers.js` in your project. It's one file, just make sure that your include declarations or asset pipeline includes `underscore_matchers` *after* `jasmine.js`. That's it. For example, here's a [Jammit][3] `assets.yml` file from a Rails project:\n\n    allow_debugging: off\n    template_function: _.template\n    compress_assets: false\n\n    javascripts:\n      common:\n        - public/js/vendor/json2.js\n        - public/js/vendor/jquery-1.6.1.min.js\n        - public/js/vendor/jquery-ui-1.8.min.js\n        - public/js/vendor/jquery.combinators.min.js\n        - public/js/vendor/jquery.predicates.min.js\n        - public/js/vendor/underscore-min.js\n        - public/js/vendor/backbone.js\n        - public/js/vendor/async.js\n      application:\n        - public/js/compiled/models/*.js\n      test:\n        - public/js/vendor/jasmine/jasmine.js\n        - public/js/vendor/jasmine/jasmine-html.js\n        - public/js/compiled/jasmine/underscore_matchers.js\n        - public/js/compiled/spec/*.js\n\n    stylesheets:\n      common:\n      application:\n      test:\n        - public/js/vendor/jasmine/*.css\n        \n[3]: https://github.com/documentcloud/jammit\n\nYou can also put `underscore_matchers_spec.coffee` or `underscore_matchers_spec.js` in your project if you want to see these matchers test themselves. It's also handy documentation for how the matchers behave!\n\nWhich Matchers are included?\n---\n\nRead the code in [Coffeescript][5] or [Javascript][6].\n\n[5]: https://github.com/raganwald/Underscore-Matchers-for-Jasmine/blob/master/lib/underscore_matchers.coffee\n[6]: https://github.com/raganwald/Underscore-Matchers-for-Jasmine/blob/master/lib/underscore_matchers.js\n\nThat's it? Aren't there any more?\n---\n\nThis is what I happen to need right now for my actual code. **As I write more matchers, I'll add them**. So, if you're interested, watch the library. I suppose I could go through and make a matcher for every function in Underscore, but I'd rather let it grow organically. If there's a matcher you need that isn't here, well, **we're all in the same boat**:\n\n* If you're a *passenger*, send me a message describing the matcher you want. If it seems useful, I'll add it.\n* If you're a *sailor*, fork this project, add the matcher, and send me a pull request.\n* If you're the *captain of your own ship*, and you've already written some matchers like this, run up some signal flags and I'll include links to your project right here.\n* And if you're a *pirate*, take this code and/or just the idea and make your own library. I'm cool with that.\n\nIs it free?\n---\n\n[Yes][4].\n\n[4]: https://github.com/raganwald/Underscore-Matchers-for-Jasmine/blob/master/license.txt\n\nOther Random Observations\n---\n\n**Who's Using This?**\n\nI am.\n\n**Is there a gem?**\n\nNo. This is a Coffeescript and Javascript include file, not a ruby library. Coffeescript and Javascript files work everywhere, and you can read the source any time you want.\n\n**Any gotchas?**\n\nSome matchers, such as `toInclude(...)` and `toRespondTo(...)` can take multiple arguments. When they do, they have \"all\" semantics. For example:\n    \n    expect([1,2,3,4,5]).toRespondTo('push', 'pop')\n      // => succeeds because arrays respond to .push and .pop\n\n    expect([1,2,3,4,5]).toInclude(2,3,4,5,6)\n       // => fails because 6 is not included.\n      \nNow what if you want to test the opposite?\n\n    expect([1,2,3,4,5]).not.toInclude(2,3,4,5,6)\n      // succeeds because it doesn't include 2, 3, 4, 5, AND 6.\n      \nIf that's what you want, fine. But if what you really want is to test whether it doesn't include ANY of the arguments, you need a slightly different matcher:\n    \n    expect([1,2,3,4,5]).toRespondToAny('push', 'select_sql', 'diagonalize')\n      // => succeeds because arrays respond to at least one of the three methods given\n\n    expect([1,2,3,4,5]).toIncludeAny(2,3,4,5,6)\n      //  => succeeds because it includes at least one of the arguments\n\nThe opposite of an \"any\" matcher is a \"none\" matcher:\n\n    expect([1,2,3,4,5]).not.toIncludeAny(3, 6, 9)\n      //  => fails because [1,2,3,4,5] includes a 3\n\n    expect([1,2,3,4,5]).not.toIncludeAny(6, 9, 12)\n      //  => succeeds because [1,2,3,4,5] does not include ANY of the aarguments\n\n\n**Is this just for underscore stuff?**\n\nNo. I also sneak in some Backbone stuff here and there, but the code works just fine even if you don't use Backbone.js. For example:\n\n    $ ->\n      describe 'States', ->\n        it 'should permit cards to be added and removed', ->\n          state = new State()\n          card = new Card()\n          expect(state.cards()).toBeEmpty()\n          state.cards().add(card)\n          expect(state.cards()).not.toBeEmpty()\n          state.cards().remove(card)\n          expect(state.cards()).toBeEmpty()\n          \n`toBeEmpty` is more than just a wrapper for `_.isEmpty`:\n\n    expect(\n      _([]).isEmpty()\n    ).toBeTruthy() // => succeeds\n    \n    expect(\n      _(new Backbone.Collection()).isEmpty()\n    ).toBeTruthy() // => fails, wtf!?\n    \n    expect([]).toBeEmpty()\n      // => succeeds\n      \n    expect(new Backbone.Collection()).toBeEmpty()\n      // => succeeds\n      \nThe same goes for collection tests like `.toInclude`. You can pass it a backbone collection or an array as you see fit. If you don't want that behaviour, Jasmine includes a `contains()` matcher that expects an array."}
{"name":"Uniform","readme":"# Uniform\n\nA ViewController for CoffeeScript in the browser. In the case\nof Uniform a ViewController is a class that describes the\nbehaviour of an element and it's children.\n\nIt goes well with jQuery.\n\n``` coffeescript\n# Let's scribe a contact form\nclass ContactForm extends Uniform\n  # The HTML template\n  template: \"\"\"\n    <form>\n      <textarea></textarea>\n      <button>Send</button>\n    </form>\n  \"\"\"\n\n  # On initialise we want to add the form to the body\n  init: -> $('body').append(@el)\n\n  # We cache some children to properties on this object\n  elements:\n    msg: 'textarea'\n    btn: 'button'\n  \n  # We delegate the submit event to @sendResponse()\n  events:\n    '':\n      'submit': 'sendResponse'\n\n  # Do the sending :)\n  sendResponse: (e) ->\n    e.preventDefault()\n    @btn.text('Sending...')\n    $.post '/contact', msg: @msg, =>\n      @msg.val('')\n      @btn.text('Send')\n\n# Initialise\nnew ContactForm\n```\n\n## CoffeeScript in the browser?\n\nUniform is best used in compiled CoffeeScript browser scripts.\nSince Uniform is a CoffeeScript class it is easiest to extend\nand use Uniform if your front end code is also CoffeeScript.\n\nUse it how you like though.\n\n## Getting a copy\n\nYou can simply use the JS found in the dist folder of the\nUniform git repo [http://github.com/DrPheltRight/uniform]()\n\n## Hacking\n\nClone the repository [http://github.com/DrPheltRight/uniform.git]()\nand then run \"cake build\" to make a fresh copy of Uniform.\n\n## License\n\nMIT\n\n## Author\n\nLuke Morton"}
{"name":"UniqueList","readme":"UniqueList is an array that guarantees the uniqueness of each element\n"}
{"name":"WhiteRabbit","readme":"# WhiteRabbit\n\n```js\n$('form').on('keyup', 'input', WhiteRabbit.stop(500, function () {\n\tconsole.log(this.value);\n}));\n```\n\nCheck out `examples/browser.html` for more examples.\n\n## Browser side\n\nUse the distributed versions of WhiteRabbit found in the\n`dist` folder of the git repo:\n[https://github.com/DrPheltRight/whiterabbit]().\n\nIf you want to compile your own clone the git repo and then\nrun `cake build`.\n\n## Server side\n\nInstall using NPM like so:\n\n\tnpm install whiterabbit\n\n## License\n\nMIT\n\n## Author\n\nLuke Morton"}
{"name":"WolfyEventEmitter","readme":"# EventEmitter\n\n**Evented JavaScript for the browser**\n\nThis script adds the EventEmitter class to your browser or any other environment such as [node.js](http://nodejs.org/).\n\nSo you can listen for and emit events from what ever objects you choose.\n\nFor more information such as documentation and examples you can either skim over the rest of this readme or [visit the wiki](https://github.com/Wolfy87/EventEmitter/wiki). Any contribution to the wiki are much appreciated.\n\n## Example\n\n\t// Initialise the EventEmitter\n\tvar ee = new EventEmitter();\n\t\n\t// Initialise the listener function\n\tfunction myListener() {\n\t\tconsole.log('The foo event was emitted.');\n\t}\n\t\n\t// Add the listener\n\tee.addListener('foo', myListener);\n\t\n\t// Emit the foo event\n\tee.emit('foo'); // The listener function is now called\n\t\n\t// Remove the listener\n\tee.removeListener('foo', myListener);\n\t\n\t// Log the array of listeners to show that it has been removed\n\tconsole.log(ee.listeners('foo'));\n\n## Tests\n\nEventEmitter is tested and working in the following browsers.\n\n * Chrome\n * Firefox\n * Safari\n * Opera\n * IE 5+\n\nIf you test it in something a little more obscure, please let me know how it turned out.\n\nTo test, simply run `test.html` in the test folder.\n\n## Author\n\nEventEmitter was written by [Oliver Caldwell](http://olivercaldwell.co.uk/).\n\n## Licence (MIT)\n\nCopyright (c) 2011 Oliver Caldwell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}
{"name":"YamYam","readme":"# YamYam\r\n\r\nYamYam is a simple kind of markdown compiler.\r\n\r\n## Syntax\r\n\r\nBasic things\r\n\r\n```\r\n# Headline\r\n\r\n## Headline 2\r\n\r\nText, *Text with accent*, _more of this_\r\nand even **more**... (and `code`)\r\n\r\n* list item\r\n* list item\r\n * list item\r\n\r\n[ ] check list item\r\n[X] check list item\r\n\r\n( ) radio list item\r\n(*) radio list item\r\n\r\nhttp://www.google.com\r\n[google](http://www.google.com)\r\n\r\na block of code with ```\r\n```\r\n\r\nYamYam supports annotations in the markdown, which can be used for app-specific things\r\n\r\n```\r\n[section-annotation name=\"value\" name2=value2 name3='value3']\r\n\r\nAnnotations with following empty line mark sections of the document\r\n\r\n[annotation name = value]\r\n[annotation name = value2]\r\nAnnotations direct before a element annotated it.\r\nMultiple annotations supported\r\n```\r\n\r\n## API\r\n\r\n``` javascript\r\nvar YamYam = require(\"YamYam\");\r\n\r\n// YamYam.parse(source, function(err, result) {\r\n// YamYam.parse(source, options, function(err, result) {\r\nYamYam.parse(source, options, formater, function(err, result) {\r\n\t// ...\r\n});\r\n```\r\n\r\n### options\r\n\r\n``` javascript\r\nvar options = {\r\n\tparser: {\r\n\t\t// Nothing yet\r\n\t},\r\n\tformater: {\r\n\t\t// Options for the formater\r\n\t\t// depend on the used formater\r\n\t}\r\n}\r\n\r\nvar formaterOptions = { // For HtmlFormater (default)\r\n\tannotations: {\r\n\t\t// maps annotation name to a function proccessing this type\r\n\t\t// example:\r\n\t\t\"@annotation\": function(attrs, annotation) {\r\n\t\t\t// annotation.name === \"@annotation\"\r\n\t\t\tattrs[\"class\"] = annotation.params[\"class\"];\r\n\t\t}\r\n\t},\r\n\tblock: undefined, // specify how sections are handled\r\n\t/*\r\n\t\tblock: false\r\n\t\t\tthe sections are emitted\r\n\t\t\t[ { annotations: [ ... ],\r\n\t\t\t\tcontent: \"...\" }, ... ]\r\n\t\tblock: 4 // number\r\n\t\t\tonly section number X will be returned\r\n\t\tblock: \"...\" // string\r\n\t\t\tonly sections which has an annotation named \"...\"\r\n\t\tblock: function(section, number) { ... } // function\r\n\t\t\ttrue, sections is included\r\n\t*/\r\n\tinline: false,\r\n\tlinesSeperator: \"<br/>\",\r\n\r\n\t// text\r\n\ttextTagname: \"p\", // inline: \"span\"\r\n\ttextOptionalPrepend: \"<br/><br/>\", // only inline\r\n\r\n\t// list\r\n\tlistTagname: \"ul\", // inline: \"span\"\r\n\tlistInnerTagname: \"li\", // inline: \"span\"\r\n\tlistOptionalPrepend: \"<br/><br/>\", // only inline\r\n\tlistItemsSeperator: \", \", // only inline\r\n\tsubListPrepend: \" (\", // only inline\r\n\tsubListAppend: \")\", // only inline\r\n\r\n\t// checklist\r\n\tchecklistTagname: \"div\", // inline: \"span\"\r\n\tchecklistInnerTagname: \"div\", // inline: \"span\"\r\n\tchecklistOptionalPrepend: \"<br/><br/>\", // only inline\r\n\tchecklistItemsSeperator: \", \", // only inline\r\n\tsubChecklistPrepend: \" (\", // only inline\r\n\tsubChecklistAppend: \")\", // only inline\r\n\r\n\t// radiolist\r\n\tradiolistTagname: \"div\", // inline: \"span\"\r\n\tradiolistInnerTagname: \"div\", // inline: \"span\"\r\n\tradiolistOptionalPrepend: \"<br/><br/>\", // only inline\r\n\tradiolistItemsSeperator: \", \", // only inline\r\n\tsubRadiolistPrepend: \" (\", // only inline\r\n\tsubRadiolistAppend: \")\", // only inline\r\n\r\n\t// headline\r\n\theadlineSubTagname: \"small\",\r\n\r\n\t// code\r\n\tcodeTagname: \"div\", // inline: span\r\n\tcodeInnerTagname: \"pre\", // inline: code\r\n\tcodeTextTagname: \"p\", // inline: span\r\n\r\n\t// formating\r\n\taccents: {\r\n\t\t\"1\": \"em\", // _xxx_\r\n\t\t\"2\": \"em\", // *xxx*\r\n\t\t\"3\": \"strong\", // __xxx__\r\n\t\t\"4\": \"strong\", // **xxx**\r\n\t\t\"default\": [\"em\", \"strong\"] // others\r\n\t},\r\n\tcode: {\r\n\t\t// same schema like accents\r\n\t\t// 1 = `xxx`, 2 = ``xxx``, ...\r\n\t\t\"default\": \"code\"\r\n\t}\r\n}\r\n```"}
{"name":"aabb","readme":"# AABB\r\n\r\n_Axis-Aligned Bounding Boxes_\r\n\r\n## Introduction\r\n\r\n## Installation\r\n\r\n````\r\nnpm install aabb\r\n````\r\n\r\n## Usage\r\n\r\n## Examples\r\n\r\nTODO\r\n\r\n## APIs\r\n\r\n### AABB\r\n\r\n#### <span class=\"heading\">constructor</span> `(min = [0,0,0], max = [0,0,0])`\r\n\r\n`min` the minimum coordinates of the AABB. In a 2-D AABB in screen space, the coordinates for the upper-left corner.\r\n\r\n`max` the maximum coordinates of the AABB. In a 2-D AABB in screen space, the coordinates for the lower-right corner.\r\n\r\nConstructs a new AABB of dimensionality equal to `min.length` using the specified bounds.\r\n\r\n*NOTE* The number of elements in `min` and `max` (ie. the dimensions) must be the same.\r\n\r\n#### <span class=\"heading\">getLength</span> `(axis)`\r\n\r\n`axis` the zero-based array index representing a particular axis. By convention, 0 = x, 1 = y, 2 = z, and so on.\r\n\r\nReturns the length of the AABB along the side defined by `axis`.\r\n\r\n#### <span class=\"heading\">getLengths</span> `()`\r\n\r\nReturns an array containing the lengths of all sides of the AABB.\r\n\r\n#### <span class=\"heading\">expandByAABB</span> `(otherAABB)`\r\n\r\nExpand `this` to contain `otherAABB`.\r\n\r\n#### <span class=\"heading\">expandToContainElements</span> `(elements, startAt = 0)`\r\n\r\n`elements` an array of elements.\r\n\r\n`startAt` offset into the `elments` which to start at.\r\n\r\nExpand `this` to contain all `elements`.\r\n\r\n#### <span class=\"heading\">makeToContainElements</span> `(elements)`\r\n\r\n`elements` an array of elements.\r\n\r\nReturn a new AABB that contains the bounds of all `elements`.\r\n\r\n#### <span class=\"heading\">overlaps</span> `(otherAABB)`\r\n\r\nReturns `true` if `this` and `otherAABB` overlap each other.\r\n\r\n#### <span class=\"heading\">contains</span> `(otherAABB)`\r\n\r\nReturns `true` if `this` completely contains `otherAABB`.\r\n\r\n#### <span class=\"heading\">contained</span> `(otherAABB)`\r\n\r\nReturns `true` if `this` is completely contained by `otherAABB`.\r\n\r\n#### <span class=\"heading\">getSurfaceArea</span> `()`\r\n\r\nReturns the surface area of the AABB. In the 2 dimension case, this is the AABB's perimeter.\r\n\r\n#### <span class=\"heading\">getVolume</span> `()`\r\n\r\nReturns the volume of the AABB. In the 2 dimension case, this is the AABB's area.\r\n\r\n#### <span class=\"heading\">clone</span> `()`\r\n\r\nReturns a clone of `this`.\r\n\r\n#### <span class=\"heading\">intersectWithRay</span> `(ray)`\r\n\r\n`ray` a ray to test against.\r\n\r\nReturns `false` is no intersection is possible. Otherwise, returns the portion of the ray (a ray segment) that results from the intersection of the ray with the AABB.\r\n\r\n#### <span class=\"heading\">intersectWithSegment</span> `(rs)`\r\n\r\n`rs` - a ray segment to test against.\r\n\r\nReturns `false` is no intersection is possible. Otherwise, returns the portion of the ray segment that results from the intersection of the ray segment with the AABB."}
{"name":"abcnode","readme":"ABC notation parser for JavaScript\n==================================\n\nABCnode is a parser for the [ABC music notation language](http://abcnotation.com/)\nfor JavaScript. Still a work in progress, it implements most of ABC 1.6. The progress can be\nfollowed in the TODO list below.\n\nABCnode uses [PEGjs](http://pegjs.majda.cz/) to generate the JavaScript parser.\nThe resulting parser can be used from Node.js or from the browser.\n\nOutput format\n-------------\n\nABCnode parses from ABC format into JSON format. This is how the generated JSON\nof a random tune looks:\n\n```javascript\n{\n  \"header\": {\n    \"refnum\": 100,\n    \"title\": \"no name\",\n    \"key\": {\n      \"baseNote\": \"G\",\n      \"accidental\": \"\"\n    },\n    \"rythm\": \"polka\",\n    \"discography\": \"Kevin Conneff: The Week before Easter\",\n    \"t_note\": \"id:hn-polka-100\",\n    \"meter\": 16,\n    \"note_length\": 32\n  },\n  \"song\": [\n    [\n      [\n        {\n          \"bar\": \"|\",\n          \"chords\": [\n            {\n              \"notes\": [\n                {\n                  \"note\": \"B\",\n                  \"duration\": 32,\n                  \"beam\": 0\n                }\n              ]\n            },\n    ...\n```\n\nI will add more output formats and a JSON schema for this format in the future.\n\nThis is a project that has been dormant for more than two years, and now\nI release it in GitHub hoping that this will encourage me to finish it soon.\n\nCopyright (c) 2010-2012, Sergi Mansilla (sergi.mansilla@gmail.com)\nAll rights reserved.\n"}
{"name":"abe","readme":"# abe #\n\nCreate read/write streams for decoding/encoding text data from ArrayBuffer arrays.\n\n```javascript\nvar ArrayReadStream = require('abe').ArrayReadStream;\n\n// lets say this is some stream which emits data as array buffers\nvar array_buff_stream;\n\n// by piping the array buffer stream into our decode stream\n// we will get the decoded data\nvar read_stream = array_buff_stream.pipe(new ArrayReadStream('utf-8'));\n\nread_stream.on('data', function(chunk) {\n    // chunk is now utf-8 data\n});\n```\n"}
{"name":"abie","readme":"Abie = A/B-testing in node\n=========================\n\n## Installation\n    $ npm install abie\n\n\n## Usage\n\n### Configure a test\n\n\n```js\n\n    abie.addTest({\n      name : \"mytest\",    //Refer to this when running the test\n      population : 10000, //Amount of impressions\n      variations : [\n        { \"name\" : \"coolVariation\", weight : \"0.5\", default : true }, //When test is over, the code will revert to default variation\n        { \"name\" : \"notSoCoolVariation\", weight : \"0.5\" },\n      ]\n    })\n\n```\n\n### In a template\n\n```jade\n\n    if abie('mytest', 'coolVariation')\n      h1 CoolVariation-header\n    if abie('mytest', 'notSoCoolVariation')\n      h1 Not so cool, but effective? Who knows, that's the fun!\n\n```\n### In a template\n\n```js\n\n    if abie('mytest', 'coolVariation')\n      res.render('variationA')\n    if abie('mytest', 'notSoCoolVariation')\n      res.render('variationA')\n\n```"}
{"name":"abiogenesis","readme":"# Abiogenesis\n\n> The start of all things.\n\n\n"}
{"name":"acc-lang-parser","readme":"# acc-lang-parser\n\nA simple parser for http Accept-Language Headers in nodejs.\n\n# usage\n\nTo only get the first language of the header:\n\n```\nvar accLangParser = require(\"parse-acc-lang\");\nvar result = accLangParser.extractFirstLang(\"de-DE\");\n\nresult => {language: \"de\", locale: \"DE\"}\n```\n\nTo get a list of all languages:\n\n```\nvar accLangParser = require(\"parse-acc-lang\");\nvar result = accLangParser.extractAllLangs(\"de-DE, en-GB\");\n\nresult => [{language: \"de\", locale: \"DE\"}\n\t\t  ,{language: \"en\", locale: \"GB\"}]\n```\n\nTake a look into the specs for more details about invalid handlers.\n\nUse accLangParser.extractFirstLang if you only interested in the first language range, because this function will skip on parsing the other ranges.\n\n# testing\n\nTo run the test:\n\n```jasmine-node spec/```  \nor  \n```npm test```\n\n# license\n\nThe license can be found in license.md."}
{"name":"acceptance","readme":"Validate parameters from an object (such as express's ```req.query```) and return any errors based on a schema defined.  \n\n```npm install acceptance```\n  \nAny parameters not defined in the schema will be discarded in the output ```a.accepted```  \n  \n```javascript\nvar accept = require('acceptance').accept;\n\nvar schema = {\n  name: {\n    required: true,\n    validation: { regex: /^[a-zA-Z0-9]+$/, message: 'Not alpha numeric' }\n  },\n  phone: {\n    required: false,\n    validation: { regex: /^-?[0-9]+$/, message: 'Not a valid integer' }\n  },\n  location: {\n    required: true,\n    validation: false\n  }\n}\n\nvar params = { name: 'bradley', phone: '012345hello', random: 'a random param' };\n\nvar a = accept(params, schema);\nif(a.errors) {\n  console.log(a.errors);\n}\nelse {\n  console.log(a.accepted);\n}\n```\nWill output:\n\n```json\n[ { field: 'phone', message: 'Not a valid integer' }, // Invalid match with regex\n  { field: 'location', message: 'Missing Field' } ]   // Not present in the params given\n```\n  \nRun the tests ```make test```  \n\n[![Build Status](https://secure.travis-ci.org/bradleyg/acceptance.png)](http://travis-ci.org/bradleyg/acceptance) "}
{"name":"access-logger","readme":"access-logger\n=============\n\naccess log for express which work with any logger."}
{"name":"access2couch","readme":"access2couch\n============\n\nA command-line utility for Windows, that pushes a MS Access database to a CouchDB instance. Written in Node.js\n\nThis tool uses a little script written in JScript simply to convert a MS access database to CSV (using ODBC), which is then used by Node to build the JSON.\n\n## Install\n\n1. Download and install the Windows version of node which can be found on nodejs.org\n\n2. Then download this project and navigate to it using `cmd`\n   \n       > cd path_to_this_project\n\n3. run `npm install -g`\n\n4. Before you run the command, remember that your database will be wiped cleaned everytime. Simply run\n\n    Usage:\n      access2couch [MSAccess file-path] [tables...] [couch]\n\n    Example:\n        access2couch forests.mdb Forests Trees http://<username>:<password>@yourcouch.com/dbname\n"}
{"name":"accumulate","readme":"# Accumulate\n\n`npm install accumulate`\n\nAccumulates data, e.g. from a readable stream.\n\n### No more of this\n\n```js\nvar data = ''\nstream.on('data', function(d) {\n    data += d\n})\nstream.on('end', function() {\n    /* something with `data` */\n})\n```\n\n### More of this\n\n```js\nvar accumulate = require('accumulate')()\nstream.on('data', accumulate)\nstream.on('end', function() {\n    var data = accumulate().data\n})\n```\n"}
{"name":"acequia","readme":"#acequia\n\nA node-js message router supporting multiple connection protocols.\n\nCurrently supports:\n\n* Open Sound Control (OSC)\n* WebSockets via socket.io\n* TCP connection\n\nTo initialize acequia:\n\n```shell\ngit clone git@github.com:prgsmall/acequia.git\n\ncd acequia\n\nnpm install\n```"}
{"name":"acid","readme":"Acid\n====\n\nAcid is rails flavored asset pipeline that makes your assets fly... Based on the excellent\n[piler](https://github.com/epeli/piler), it adds some extra spice on top of it, like global definition\nfiles, precompilation of client-side templates, hot code pushes, and more..\n\nIt was developed for the use with express, backbone.js and handlebars.\n\n\nInstallation\n------------\n\n    npm install https://github.com/phreax/acid.git \n\nUsage\n-----\n\nFirst create a configuration file to define all your assets:\n\nconfig.coffee:\n\n```coffee\nmodule.exports = \n  assets:\n    dir: 'public'\n\n    javascripts: [\n\n      (require: 'vendor/jquery-1.7.1.min.js')\n      (require: 'vendor/underscore.js')\n      (require: 'vendor/backbone.js')\n      \n      (require_tree: 'lib/models')\n      (require_tree: 'lib/collections')\n      (require_tree: 'lib/views')\n\n      (require: 'lib/app.js')\n    ]\n\n    stylesheets: [\n      (require: 'style.css') \n    ]\n\n    templates:\n      dir: 'templates'\n      engine: 'handlebars'\n      lib: 'vendor/handlebars.runtime.js'\n      watch: true\n```\n\nKeys:\n\n* `require`: load single file\n* `require_tree`: load directory recursive\n\nAcid assumes that you have your asset directory structured like this, if not specified:\n\n  javascripts/\n  stylesheets/\n  templates/\n\n### Setup Application\n\nRequire acid:\n\n    acid = require 'acid'\n\nLoad the configuration file:\n\n    config = require 'config'\n\nBind it to your app:\n\n    acid.bind app, acid: config\n\nFor hot code push and live templating you should\nalso add io, otherwise it will be loaded by default.\n\n  acid.bind app, acid: config, io: io\n\n### Setup View\n\nIn your main view you need to add following line, so piler can inject \nthe resources:\n\nindex.jade:\n\n    !{renderScriptTags()}\n\n### Live Templating \n\nAcid will compile all clientside templates for you. Currently only **Handlebars** is supported, which is\na great clientside template engine based on **mustache.js**.\nBut the real kick is, that it will also watch your template directory for changes, and push the code directly\nto the browser, so it will be instantly viewed. Just bind a Backbone event to the Handlebars.set method:\n\n```javascript\n  // set up observer on handlebar templates\n  Handlebars.templates = Handlebars.templates || {};\n  _.extend(Handlebars, Backbone.Events);\n\n  Handlebars.set = _.bind(function(name,template) {\n    _.extend(template,Backbone.Events);\n    this.templates[name] = template;\n    this.trigger('changed',name);\n    this.trigger('changed:'+name);\n  },Handlebars);\n```\n \nNo you can listen to changes of templates and rerender your view!\n\n\n### Supported compilers\n\nhandlebars, coffee-script, less\n\n\n## Depenencies\n\n* express\n* [piler](https://github.com/epeli/piler)\n* [handlebars-precompiler](https://github.com/phreax/node-handlebars-precompiler)\n* socket.io \n\n## Development\n\nAcid is still under heavy development. Contribution is always welcome!\n\n\n"}
